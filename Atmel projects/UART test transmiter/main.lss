
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004f  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000287  00000000  00000000  00000201  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000123  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000028e  00000000  00000000  000005ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  0000083c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f8  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000ee  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  78:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_INIT>:
void USART_INIT(void)
{
//Set baud rate 
uint16_t ubrr=F_CPU/baud/16-1;

UBRR0H = (unsigned char)(ubrr>>8);
  80:	10 92 c5 00 	sts	0x00C5, r1
UBRR0L = (unsigned char)ubrr;
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24
//Enable receiver and transmitter
UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	80 93 c1 00 	sts	0x00C1, r24
 //Set frame format: 8data, 2stop bit 
UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  90:	8e e0       	ldi	r24, 0x0E	; 14
  92:	80 93 c2 00 	sts	0x00C2, r24
}
  96:	08 95       	ret

00000098 <USART_TRANSMIT>:

void USART_TRANSMIT( unsigned char data )
{
  98:	98 2f       	mov	r25, r24
// Wait for empty transmit buffer 
while ( !( UCSR0A & (1<<UDRE0)) );
  9a:	80 91 c0 00 	lds	r24, 0x00C0
  9e:	85 ff       	sbrs	r24, 5
  a0:	fc cf       	rjmp	.-8      	; 0x9a <USART_TRANSMIT+0x2>
//Put data into buffer, sends the data 
UDR0 = data;
  a2:	90 93 c6 00 	sts	0x00C6, r25
}
  a6:	08 95       	ret

000000a8 <USART_RECEIVE>:

unsigned char USART_RECEIVE( void )
{
// Wait for data to be received 
while ( !(UCSR0A & (1<<RXC0)) );
  a8:	80 91 c0 00 	lds	r24, 0x00C0
  ac:	87 ff       	sbrs	r24, 7
  ae:	fc cf       	rjmp	.-8      	; 0xa8 <USART_RECEIVE>
// Get and return received data from buffer 
return UDR0;
  b0:	80 91 c6 00 	lds	r24, 0x00C6
}
  b4:	08 95       	ret

000000b6 <main>:
void USART_INIT(void)
{
//Set baud rate 
uint16_t ubrr=F_CPU/baud/16-1;

UBRR0H = (unsigned char)(ubrr>>8);
  b6:	10 92 c5 00 	sts	0x00C5, r1
UBRR0L = (unsigned char)ubrr;
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	80 93 c4 00 	sts	0x00C4, r24
//Enable receiver and transmitter
UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	80 93 c1 00 	sts	0x00C1, r24
 //Set frame format: 8data, 2stop bit 
UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  c6:	8e e0       	ldi	r24, 0x0E	; 14
  c8:	80 93 c2 00 	sts	0x00C2, r24
//PORTB2=GREEN BUTTON
//PORTB3=BLUE BUTTON
int main( void )
{
USART_INIT();
PORTB = 0xFF;//PULL UP RESISITORS    
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	85 b9       	out	0x05, r24	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d0:	20 e9       	ldi	r18, 0x90	; 144
  d2:	31 e0       	ldi	r19, 0x01	; 1
void USART_TRANSMIT( unsigned char data )
{
// Wait for empty transmit buffer 
while ( !( UCSR0A & (1<<UDRE0)) );
//Put data into buffer, sends the data 
UDR0 = data;
  d4:	62 e7       	ldi	r22, 0x72	; 114
	while(1)
	{
		if(!(PINB & (1<<PINB1)))
  d6:	52 e6       	ldi	r21, 0x62	; 98
  d8:	47 e6       	ldi	r20, 0x67	; 103
  da:	19 99       	sbic	0x03, 1	; 3
  dc:	0e c0       	rjmp	.+28     	; 0xfa <main+0x44>
  de:	84 ef       	ldi	r24, 0xF4	; 244
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	f9 01       	movw	r30, r18
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ea:	d9 f7       	brne	.-10     	; 0xe2 <main+0x2c>
}

void USART_TRANSMIT( unsigned char data )
{
// Wait for empty transmit buffer 
while ( !( UCSR0A & (1<<UDRE0)) );
  ec:	80 91 c0 00 	lds	r24, 0x00C0
  f0:	85 ff       	sbrs	r24, 5
  f2:	fc cf       	rjmp	.-8      	; 0xec <main+0x36>
//Put data into buffer, sends the data 
UDR0 = data;
  f4:	60 93 c6 00 	sts	0x00C6, r22
  f8:	f0 cf       	rjmp	.-32     	; 0xda <main+0x24>
		{
			_delay_ms(50);
			USART_TRANSMIT('r');
		}
		else if(!(PINB & (1<<PINB2)))
  fa:	1a 99       	sbic	0x03, 2	; 3
  fc:	0e c0       	rjmp	.+28     	; 0x11a <main+0x64>
  fe:	84 ef       	ldi	r24, 0xF4	; 244
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	f9 01       	movw	r30, r18
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 108:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10a:	d9 f7       	brne	.-10     	; 0x102 <main+0x4c>
}

void USART_TRANSMIT( unsigned char data )
{
// Wait for empty transmit buffer 
while ( !( UCSR0A & (1<<UDRE0)) );
 10c:	80 91 c0 00 	lds	r24, 0x00C0
 110:	85 ff       	sbrs	r24, 5
 112:	fc cf       	rjmp	.-8      	; 0x10c <main+0x56>
//Put data into buffer, sends the data 
UDR0 = data;
 114:	40 93 c6 00 	sts	0x00C6, r20
 118:	e0 cf       	rjmp	.-64     	; 0xda <main+0x24>
		{
			_delay_ms(50);
			USART_TRANSMIT('g');
		}
		else if(!(PINB & (1<<PINB3)))
 11a:	1b 99       	sbic	0x03, 3	; 3
 11c:	de cf       	rjmp	.-68     	; 0xda <main+0x24>
 11e:	84 ef       	ldi	r24, 0xF4	; 244
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	f9 01       	movw	r30, r18
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 128:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12a:	d9 f7       	brne	.-10     	; 0x122 <main+0x6c>
}

void USART_TRANSMIT( unsigned char data )
{
// Wait for empty transmit buffer 
while ( !( UCSR0A & (1<<UDRE0)) );
 12c:	80 91 c0 00 	lds	r24, 0x00C0
 130:	85 ff       	sbrs	r24, 5
 132:	fc cf       	rjmp	.-8      	; 0x12c <main+0x76>
//Put data into buffer, sends the data 
UDR0 = data;
 134:	50 93 c6 00 	sts	0x00C6, r21
 138:	d0 cf       	rjmp	.-96     	; 0xda <main+0x24>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
