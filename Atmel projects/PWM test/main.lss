
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000036  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000203  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000142  00000000  00000000  00000391  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001f8  00000000  00000000  000004d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000fa  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000130  00000000  00000000  00000806  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	23 d0       	rcall	.+70     	; 0x7a <main>
  34:	55 c0       	rjmp	.+170    	; 0xe0 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <PWM_INIT>:
void PWM_INIT(int);
void PWM_WRITE(int, char, int);

void PWM_INIT(int c)
{
	switch (c)
  38:	01 97       	sbiw	r24, 0x01	; 1
  3a:	61 f4       	brne	.+24     	; 0x54 <__SREG__+0x15>
			TCCR0A |= 1<<WGM01|1<<COM0A1;//Fast PWM, Inverted mode
			TCCR0B |= 1<<WGM02|1<<WGM03|1<<CS00;//Fast PWM, No prescaler
			ICR0=19999;
			break;
	*/
	case 1:DDRB = 0b00000110;
  3c:	86 e0       	ldi	r24, 0x06	; 6
  3e:	87 bb       	out	0x17, r24	; 23
			TCCR1A |= 1<<WGM11|1<<COM1A1;//Fast PWM, Inverted mode
  40:	8f b5       	in	r24, 0x2f	; 47
  42:	82 68       	ori	r24, 0x82	; 130
  44:	8f bd       	out	0x2f, r24	; 47
			TCCR1B |= 1<<WGM12|1<<WGM13|1<<CS10|1<<CS11;//Fast PWM, prescaler 64
  46:	8e b5       	in	r24, 0x2e	; 46
  48:	8b 61       	ori	r24, 0x1B	; 27
  4a:	8e bd       	out	0x2e, r24	; 46
			ICR1=255;
  4c:	8f ef       	ldi	r24, 0xFF	; 255
  4e:	90 e0       	ldi	r25, 0x00	; 0
  50:	97 bd       	out	0x27, r25	; 39
  52:	86 bd       	out	0x26, r24	; 38
  54:	08 95       	ret

00000056 <PWM_WRITE>:
	}
}

void PWM_WRITE(int ocr_num,char ocr, int pwm_val)
{
	if(ocr=='a'||ocr=='A')
  56:	61 36       	cpi	r22, 0x61	; 97
  58:	11 f0       	breq	.+4      	; 0x5e <PWM_WRITE+0x8>
  5a:	61 34       	cpi	r22, 0x41	; 65
  5c:	29 f4       	brne	.+10     	; 0x68 <PWM_WRITE+0x12>
	{
		if(ocr_num==1)OCR1A=pwm_val;
  5e:	01 97       	sbiw	r24, 0x01	; 1
  60:	59 f4       	brne	.+22     	; 0x78 <PWM_WRITE+0x22>
  62:	5b bd       	out	0x2b, r21	; 43
  64:	4a bd       	out	0x2a, r20	; 42
  66:	08 95       	ret
		//else if(ocr_num==2) OCR2A=pwm_val;
		//else OCR0A=pwm_val;
	}
	else if(ocr=='b'||ocr=='B')
  68:	62 36       	cpi	r22, 0x62	; 98
  6a:	11 f0       	breq	.+4      	; 0x70 <PWM_WRITE+0x1a>
  6c:	62 34       	cpi	r22, 0x42	; 66
  6e:	21 f4       	brne	.+8      	; 0x78 <PWM_WRITE+0x22>
	{
		if(ocr_num==1)OCR1B=pwm_val;
  70:	01 97       	sbiw	r24, 0x01	; 1
  72:	11 f4       	brne	.+4      	; 0x78 <PWM_WRITE+0x22>
  74:	59 bd       	out	0x29, r21	; 41
  76:	48 bd       	out	0x28, r20	; 40
  78:	08 95       	ret

0000007a <main>:
#include<avr/io.h>
#include "mylib/PWM.h"
#include<util/delay.h>

int main()
{
  7a:	0f 93       	push	r16
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
	int del=50;
	PWM_INIT(1);
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	d8 df       	rcall	.-80     	; 0x38 <PWM_INIT>
  88:	c0 e0       	ldi	r28, 0x00	; 0
  8a:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8c:	00 e9       	ldi	r16, 0x90	; 144
  8e:	11 e0       	ldi	r17, 0x01	; 1
  90:	0d c0       	rjmp	.+26     	; 0xac <main+0x32>
	while(1)
	{
		for(int i=0;i<=300;i++)
		{
			PWM_WRITE(1,'A',i);
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	61 e4       	ldi	r22, 0x41	; 65
  98:	ae 01       	movw	r20, r28
  9a:	dd df       	rcall	.-70     	; 0x56 <PWM_WRITE>
  9c:	84 ef       	ldi	r24, 0xF4	; 244
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	f8 01       	movw	r30, r16
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a8:	d9 f7       	brne	.-10     	; 0xa0 <main+0x26>
{
	int del=50;
	PWM_INIT(1);
	while(1)
	{
		for(int i=0;i<=300;i++)
  aa:	21 96       	adiw	r28, 0x01	; 1
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	cd 32       	cpi	r28, 0x2D	; 45
  b0:	d8 07       	cpc	r29, r24
  b2:	7c f3       	brlt	.-34     	; 0x92 <main+0x18>
  b4:	cc e2       	ldi	r28, 0x2C	; 44
  b6:	d1 e0       	ldi	r29, 0x01	; 1
			PWM_WRITE(1,'A',i);
			_delay_ms(del);
		}
		for(int i=300;i>=0;i--)
		{
			PWM_WRITE(1,'A',i);
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	61 e4       	ldi	r22, 0x41	; 65
  be:	ae 01       	movw	r20, r28
  c0:	ca df       	rcall	.-108    	; 0x56 <PWM_WRITE>
  c2:	84 ef       	ldi	r24, 0xF4	; 244
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	f8 01       	movw	r30, r16
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ce:	d9 f7       	brne	.-10     	; 0xc6 <main+0x4c>
		for(int i=0;i<=300;i++)
		{
			PWM_WRITE(1,'A',i);
			_delay_ms(del);
		}
		for(int i=300;i>=0;i--)
  d0:	21 97       	sbiw	r28, 0x01	; 1
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	cf 3f       	cpi	r28, 0xFF	; 255
  d6:	d8 07       	cpc	r29, r24
  d8:	79 f7       	brne	.-34     	; 0xb8 <main+0x3e>
  da:	c0 e0       	ldi	r28, 0x00	; 0
  dc:	d0 e0       	ldi	r29, 0x00	; 0
  de:	e6 cf       	rjmp	.-52     	; 0xac <main+0x32>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
