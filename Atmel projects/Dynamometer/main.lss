
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000382  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000092  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000207  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000175  00000000  00000000  0000063b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a3  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000a54  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000133  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d4  00000000  00000000  00000c07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	c9 c0       	rjmp	.+402    	; 0x196 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	58 d0       	rcall	.+176    	; 0xf4 <main>
  44:	62 c1       	rjmp	.+708    	; 0x30a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <USART_INIT>:
void USART_TRANSMIT( unsigned char );
unsigned char USART_RECIEVE( void );
void USART_TRANSMIT_NUM( int );

void USART_INIT(unsigned int baud, int AsyncDoubleSpeed,int DataSize,int Parity)
{
  48:	ef 92       	push	r14
  4a:	ff 92       	push	r15
  4c:	0f 93       	push	r16
  4e:	1f 93       	push	r17
  50:	cf 93       	push	r28
  52:	df 93       	push	r29
  54:	8b 01       	movw	r16, r22
  56:	ea 01       	movw	r28, r20
  58:	79 01       	movw	r14, r18
	uint16_t ubrr=F_CPU/baud/16-1;
  5a:	9c 01       	movw	r18, r24
  5c:	40 e0       	ldi	r20, 0x00	; 0
  5e:	50 e0       	ldi	r21, 0x00	; 0
  60:	60 e4       	ldi	r22, 0x40	; 64
  62:	72 e4       	ldi	r23, 0x42	; 66
  64:	8f e0       	ldi	r24, 0x0F	; 15
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	d0 d0       	rcall	.+416    	; 0x20a <__divmodsi4>
  6a:	21 50       	subi	r18, 0x01	; 1
  6c:	30 40       	sbci	r19, 0x00	; 0
	//Put the upper part of the baud number here (bits 8 to 11)
	UBRRH = (unsigned char) (ubrr >> 8);
  6e:	30 bd       	out	0x20, r19	; 32
	//UBBRH0 = (unsigned char) (ubrr >> 8);

	//Put the remaining part of the baud number here
	UBRRL = (unsigned char) ubrr;
  70:	29 b9       	out	0x09, r18	; 9
	//UBBRL0 = (unsigned char) ubrr;

	if(AsyncDoubleSpeed == 1)UCSRA = (1 << U2X); //setting the U2X bit to 1 for double speed asynchronous
  72:	01 30       	cpi	r16, 0x01	; 1
  74:	11 05       	cpc	r17, r1
  76:	11 f4       	brne	.+4      	; 0x7c <USART_INIT+0x34>
  78:	82 e0       	ldi	r24, 0x02	; 2
  7a:	8b b9       	out	0x0b, r24	; 11

	//Enable the receiver and transmitter
	UCSRB = (1 << RXEN) | (1 << TXEN);
  7c:	88 e1       	ldi	r24, 0x18	; 24
  7e:	8a b9       	out	0x0a, r24	; 10
	//UCSRB0 = (1 << RXEN0) | (1 << TXEN0);

	//Set data bit length
	switch(DataSize)
  80:	c7 30       	cpi	r28, 0x07	; 7
  82:	d1 05       	cpc	r29, r1
  84:	79 f0       	breq	.+30     	; 0xa4 <USART_INIT+0x5c>
  86:	c8 30       	cpi	r28, 0x08	; 8
  88:	d1 05       	cpc	r29, r1
  8a:	1c f4       	brge	.+6      	; 0x92 <USART_INIT+0x4a>
  8c:	26 97       	sbiw	r28, 0x06	; 6
  8e:	99 f4       	brne	.+38     	; 0xb6 <USART_INIT+0x6e>
  90:	06 c0       	rjmp	.+12     	; 0x9e <USART_INIT+0x56>
  92:	c8 30       	cpi	r28, 0x08	; 8
  94:	d1 05       	cpc	r29, r1
  96:	49 f0       	breq	.+18     	; 0xaa <USART_INIT+0x62>
  98:	29 97       	sbiw	r28, 0x09	; 9
  9a:	69 f4       	brne	.+26     	; 0xb6 <USART_INIT+0x6e>
  9c:	09 c0       	rjmp	.+18     	; 0xb0 <USART_INIT+0x68>
	{
		case 6:UCSRC |= (1 << UCSZ0); //6-bit data length
  9e:	80 b5       	in	r24, 0x20	; 32
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	08 c0       	rjmp	.+16     	; 0xb4 <USART_INIT+0x6c>
				//UCSRC0 |= (1 << UCSZ00);
	           break;

		case 7:UCSRC |= (2 << UCSZ0); //7-bit data length
  a4:	80 b5       	in	r24, 0x20	; 32
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	05 c0       	rjmp	.+10     	; 0xb4 <USART_INIT+0x6c>
				//UCSRC0 |= (2 << UCSZ00);
				break;

		case 8:UCSRC |= (3 << UCSZ0); //8-bit data length
  aa:	80 b5       	in	r24, 0x20	; 32
  ac:	86 60       	ori	r24, 0x06	; 6
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <USART_INIT+0x6c>
				//UCSRC0 |= (3 << UCSZ00);
				break;

		case 9:UCSRC |= (7 << UCSZ0); //9-bit data length
  b0:	80 b5       	in	r24, 0x20	; 32
  b2:	8e 60       	ori	r24, 0x0E	; 14
  b4:	80 bd       	out	0x20, r24	; 32
				//UCSRC0 |= (7 << UCSZ00);
				break;
		default:break;
	}
	//Set 2 stop bits
	UCSRC = (1<<URSEL)|(1<<USBS);
  b6:	88 e8       	ldi	r24, 0x88	; 136
  b8:	80 bd       	out	0x20, r24	; 32
	//UCSRC0 = (1<<URSEL0)|(1<<USBS0);
	switch(Parity)
  ba:	e1 14       	cp	r14, r1
  bc:	f1 04       	cpc	r15, r1
  be:	29 f0       	breq	.+10     	; 0xca <USART_INIT+0x82>
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	e8 16       	cp	r14, r24
  c4:	f1 04       	cpc	r15, r1
  c6:	39 f4       	brne	.+14     	; 0xd6 <USART_INIT+0x8e>
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <USART_INIT+0x88>
	{
		case EVEN:UCSRC |= (1 << UPM1); //Sets parity to EVEN
  ca:	80 b5       	in	r24, 0x20	; 32
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <USART_INIT+0x8c>
					//UCSRC0 |= (1 << UPM01);
					break;
		case ODD:UCSRC |= (3 << UPM0); //Sets parity to ODD
  d0:	80 b5       	in	r24, 0x20	; 32
  d2:	80 63       	ori	r24, 0x30	; 48
  d4:	80 bd       	out	0x20, r24	; 32
					//UCSRC0 |= (3 << UPM00);
					break;
	}
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	0f 91       	pop	r16
  de:	ff 90       	pop	r15
  e0:	ef 90       	pop	r14
  e2:	08 95       	ret

000000e4 <USART_TRANSMIT>:

void USART_TRANSMIT( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) );
  e4:	5d 9b       	sbis	0x0b, 5	; 11
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <USART_TRANSMIT>
/* Put data into buffer, sends the data */
UDR = data;
  e8:	8c b9       	out	0x0c, r24	; 12
}
  ea:	08 95       	ret

000000ec <USART_RECIEVE>:


unsigned char USART_RECIEVE( void )
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) );
  ec:	5f 9b       	sbis	0x0b, 7	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <USART_RECIEVE>
/* Get and return received data from buffer */
return UDR;
  f0:	8c b1       	in	r24, 0x0c	; 12
}
  f2:	08 95       	ret

000000f4 <main>:
volatile int rot_time=0;


int main(void)
{
	DDRD = 1<<PD2;		// Set PD2 as input (Using for interupt INT0)
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	81 bb       	out	0x11, r24	; 17
	PORTD = 1<<PD2;
  f8:	82 bb       	out	0x12, r24	; 18
	DDRB = (1<<check_led)|(1<<error_led);//setting up indicating leds
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	87 bb       	out	0x17, r24	; 23
	USART_INIT(9600,0,8,EVEN);
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	95 e2       	ldi	r25, 0x25	; 37
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	48 e0       	ldi	r20, 0x08	; 8
 108:	50 e0       	ldi	r21, 0x00	; 0
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	9c df       	rcall	.-200    	; 0x48 <USART_INIT>
	//enable interupts
	sei();
 110:	78 94       	sei
	GICR |= 1<<INT0;//Enable interrupt 0
 112:	8b b7       	in	r24, 0x3b	; 59
 114:	80 64       	ori	r24, 0x40	; 64
 116:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1<<ISC01;//falling edge sensing
 118:	85 b7       	in	r24, 0x35	; 53
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	85 bf       	out	0x35, r24	; 53
}

void timer1_init(void)
{
    // set up timer with 1024 prescaling
    TCCR1B |= (1 << CS12)|(1 << CS10);
 11e:	8e b5       	in	r24, 0x2e	; 46
 120:	85 60       	ori	r24, 0x05	; 5
 122:	8e bd       	out	0x2e, r24	; 46
    // initialize counter
    TCNT1 = 0;
 124:	1d bc       	out	0x2d, r1	; 45
 126:	1c bc       	out	0x2c, r1	; 44
	MCUCR |= 1<<ISC01;//falling edge sensing
	timer1_init();
	
	while(1)
	{
		if(TCNT1>12000)
 128:	8c b5       	in	r24, 0x2c	; 44
 12a:	9d b5       	in	r25, 0x2d	; 45
 12c:	81 5e       	subi	r24, 0xE1	; 225
 12e:	9e 42       	sbci	r25, 0x2E	; 46
 130:	10 f0       	brcs	.+4      	; 0x136 <main+0x42>
			PORTB |= (1<<error_led);
 132:	c2 9a       	sbi	0x18, 2	; 24
 134:	01 c0       	rjmp	.+2      	; 0x138 <main+0x44>
		else PORTB &= ~(1<<error_led);
 136:	c2 98       	cbi	0x18, 2	; 24
		PORTB &= ~(1<<check_led);
 138:	c1 98       	cbi	0x18, 1	; 24
 13a:	f6 cf       	rjmp	.-20     	; 0x128 <main+0x34>

0000013c <timer1_init>:
}

void timer1_init(void)
{
    // set up timer with 1024 prescaling
    TCCR1B |= (1 << CS12)|(1 << CS10);
 13c:	8e b5       	in	r24, 0x2e	; 46
 13e:	85 60       	ori	r24, 0x05	; 5
 140:	8e bd       	out	0x2e, r24	; 46
    // initialize counter
    TCNT1 = 0;
 142:	1d bc       	out	0x2d, r1	; 45
 144:	1c bc       	out	0x2c, r1	; 44
}
 146:	08 95       	ret

00000148 <USART_TRANSMIT_NUM>:

void USART_TRANSMIT_NUM(int data)
{
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	df 93       	push	r29
 14e:	cf 93       	push	r28
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	29 97       	sbiw	r28, 0x09	; 9
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
	char num_str[9];
	itoa(data,num_str,10);
 160:	8e 01       	movw	r16, r28
 162:	0f 5f       	subi	r16, 0xFF	; 255
 164:	1f 4f       	sbci	r17, 0xFF	; 255
 166:	b8 01       	movw	r22, r16
 168:	4a e0       	ldi	r20, 0x0A	; 10
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	8b d0       	rcall	.+278    	; 0x284 <itoa>
 16e:	f8 01       	movw	r30, r16
 170:	04 c0       	rjmp	.+8      	; 0x17a <USART_TRANSMIT_NUM+0x32>
}

void USART_TRANSMIT( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) );
 172:	5d 9b       	sbis	0x0b, 5	; 11
 174:	fe cf       	rjmp	.-4      	; 0x172 <USART_TRANSMIT_NUM+0x2a>
/* Put data into buffer, sends the data */
UDR = data;
 176:	8c b9       	out	0x0c, r24	; 12
 178:	31 96       	adiw	r30, 0x01	; 1

void USART_TRANSMIT_NUM(int data)
{
	char num_str[9];
	itoa(data,num_str,10);
	for(int i=0; num_str[i]!='\0';)
 17a:	80 81       	ld	r24, Z
 17c:	88 23       	and	r24, r24
 17e:	c9 f7       	brne	.-14     	; 0x172 <USART_TRANSMIT_NUM+0x2a>
		USART_TRANSMIT(num_str[i++]);
	
}
 180:	29 96       	adiw	r28, 0x09	; 9
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
 18c:	cf 91       	pop	r28
 18e:	df 91       	pop	r29
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <__vector_1>:

//interrupt code for sensing falling edge 
ISR(INT0_vect) 
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	//int0
	if(TCNT1 < 12000 )
 1b8:	8c b5       	in	r24, 0x2c	; 44
 1ba:	9d b5       	in	r25, 0x2d	; 45
 1bc:	80 5e       	subi	r24, 0xE0	; 224
 1be:	9e 42       	sbci	r25, 0x2E	; 46
 1c0:	80 f4       	brcc	.+32     	; 0x1e2 <__vector_1+0x4c>
	{
		rot_time=TCNT1;
 1c2:	8c b5       	in	r24, 0x2c	; 44
 1c4:	9d b5       	in	r25, 0x2d	; 45
 1c6:	90 93 61 00 	sts	0x0061, r25
 1ca:	80 93 60 00 	sts	0x0060, r24
		TCNT1=0;
 1ce:	1d bc       	out	0x2d, r1	; 45
 1d0:	1c bc       	out	0x2c, r1	; 44
		USART_TRANSMIT_NUM(rot_time);
 1d2:	80 91 60 00 	lds	r24, 0x0060
 1d6:	90 91 61 00 	lds	r25, 0x0061
 1da:	b6 df       	rcall	.-148    	; 0x148 <USART_TRANSMIT_NUM>
		PORTB &= ~(1<<error_led);
 1dc:	c2 98       	cbi	0x18, 2	; 24
		PORTB |= 1<<check_led;
 1de:	c1 9a       	sbi	0x18, 1	; 24
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <__vector_1+0x52>
	}
	else
	{
		TCNT1=0;
 1e2:	1d bc       	out	0x2d, r1	; 45
 1e4:	1c bc       	out	0x2c, r1	; 44
		PORTB |= 1<<error_led;
 1e6:	c2 9a       	sbi	0x18, 2	; 24
	}
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <__divmodsi4>:
 20a:	97 fb       	bst	r25, 7
 20c:	09 2e       	mov	r0, r25
 20e:	05 26       	eor	r0, r21
 210:	0e d0       	rcall	.+28     	; 0x22e <__divmodsi4_neg1>
 212:	57 fd       	sbrc	r21, 7
 214:	04 d0       	rcall	.+8      	; 0x21e <__divmodsi4_neg2>
 216:	14 d0       	rcall	.+40     	; 0x240 <__udivmodsi4>
 218:	0a d0       	rcall	.+20     	; 0x22e <__divmodsi4_neg1>
 21a:	00 1c       	adc	r0, r0
 21c:	38 f4       	brcc	.+14     	; 0x22c <__divmodsi4_exit>

0000021e <__divmodsi4_neg2>:
 21e:	50 95       	com	r21
 220:	40 95       	com	r20
 222:	30 95       	com	r19
 224:	21 95       	neg	r18
 226:	3f 4f       	sbci	r19, 0xFF	; 255
 228:	4f 4f       	sbci	r20, 0xFF	; 255
 22a:	5f 4f       	sbci	r21, 0xFF	; 255

0000022c <__divmodsi4_exit>:
 22c:	08 95       	ret

0000022e <__divmodsi4_neg1>:
 22e:	f6 f7       	brtc	.-4      	; 0x22c <__divmodsi4_exit>
 230:	90 95       	com	r25
 232:	80 95       	com	r24
 234:	70 95       	com	r23
 236:	61 95       	neg	r22
 238:	7f 4f       	sbci	r23, 0xFF	; 255
 23a:	8f 4f       	sbci	r24, 0xFF	; 255
 23c:	9f 4f       	sbci	r25, 0xFF	; 255
 23e:	08 95       	ret

00000240 <__udivmodsi4>:
 240:	a1 e2       	ldi	r26, 0x21	; 33
 242:	1a 2e       	mov	r1, r26
 244:	aa 1b       	sub	r26, r26
 246:	bb 1b       	sub	r27, r27
 248:	fd 01       	movw	r30, r26
 24a:	0d c0       	rjmp	.+26     	; 0x266 <__udivmodsi4_ep>

0000024c <__udivmodsi4_loop>:
 24c:	aa 1f       	adc	r26, r26
 24e:	bb 1f       	adc	r27, r27
 250:	ee 1f       	adc	r30, r30
 252:	ff 1f       	adc	r31, r31
 254:	a2 17       	cp	r26, r18
 256:	b3 07       	cpc	r27, r19
 258:	e4 07       	cpc	r30, r20
 25a:	f5 07       	cpc	r31, r21
 25c:	20 f0       	brcs	.+8      	; 0x266 <__udivmodsi4_ep>
 25e:	a2 1b       	sub	r26, r18
 260:	b3 0b       	sbc	r27, r19
 262:	e4 0b       	sbc	r30, r20
 264:	f5 0b       	sbc	r31, r21

00000266 <__udivmodsi4_ep>:
 266:	66 1f       	adc	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	88 1f       	adc	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	1a 94       	dec	r1
 270:	69 f7       	brne	.-38     	; 0x24c <__udivmodsi4_loop>
 272:	60 95       	com	r22
 274:	70 95       	com	r23
 276:	80 95       	com	r24
 278:	90 95       	com	r25
 27a:	9b 01       	movw	r18, r22
 27c:	ac 01       	movw	r20, r24
 27e:	bd 01       	movw	r22, r26
 280:	cf 01       	movw	r24, r30
 282:	08 95       	ret

00000284 <itoa>:
 284:	fb 01       	movw	r30, r22
 286:	9f 01       	movw	r18, r30
 288:	e8 94       	clt
 28a:	42 30       	cpi	r20, 0x02	; 2
 28c:	bc f0       	brlt	.+46     	; 0x2bc <itoa+0x38>
 28e:	45 32       	cpi	r20, 0x25	; 37
 290:	ac f4       	brge	.+42     	; 0x2bc <itoa+0x38>
 292:	4a 30       	cpi	r20, 0x0A	; 10
 294:	29 f4       	brne	.+10     	; 0x2a0 <itoa+0x1c>
 296:	97 fb       	bst	r25, 7
 298:	1e f4       	brtc	.+6      	; 0x2a0 <itoa+0x1c>
 29a:	90 95       	com	r25
 29c:	81 95       	neg	r24
 29e:	9f 4f       	sbci	r25, 0xFF	; 255
 2a0:	64 2f       	mov	r22, r20
 2a2:	77 27       	eor	r23, r23
 2a4:	1e d0       	rcall	.+60     	; 0x2e2 <__udivmodhi4>
 2a6:	80 5d       	subi	r24, 0xD0	; 208
 2a8:	8a 33       	cpi	r24, 0x3A	; 58
 2aa:	0c f0       	brlt	.+2      	; 0x2ae <itoa+0x2a>
 2ac:	89 5d       	subi	r24, 0xD9	; 217
 2ae:	81 93       	st	Z+, r24
 2b0:	cb 01       	movw	r24, r22
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	a9 f7       	brne	.-22     	; 0x2a0 <itoa+0x1c>
 2b6:	16 f4       	brtc	.+4      	; 0x2bc <itoa+0x38>
 2b8:	5d e2       	ldi	r21, 0x2D	; 45
 2ba:	51 93       	st	Z+, r21
 2bc:	10 82       	st	Z, r1
 2be:	c9 01       	movw	r24, r18
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <strrev>

000002c2 <strrev>:
 2c2:	dc 01       	movw	r26, r24
 2c4:	fc 01       	movw	r30, r24
 2c6:	67 2f       	mov	r22, r23
 2c8:	71 91       	ld	r23, Z+
 2ca:	77 23       	and	r23, r23
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <strrev+0x4>
 2ce:	32 97       	sbiw	r30, 0x02	; 2
 2d0:	04 c0       	rjmp	.+8      	; 0x2da <strrev+0x18>
 2d2:	7c 91       	ld	r23, X
 2d4:	6d 93       	st	X+, r22
 2d6:	70 83       	st	Z, r23
 2d8:	62 91       	ld	r22, -Z
 2da:	ae 17       	cp	r26, r30
 2dc:	bf 07       	cpc	r27, r31
 2de:	c8 f3       	brcs	.-14     	; 0x2d2 <strrev+0x10>
 2e0:	08 95       	ret

000002e2 <__udivmodhi4>:
 2e2:	aa 1b       	sub	r26, r26
 2e4:	bb 1b       	sub	r27, r27
 2e6:	51 e1       	ldi	r21, 0x11	; 17
 2e8:	07 c0       	rjmp	.+14     	; 0x2f8 <__udivmodhi4_ep>

000002ea <__udivmodhi4_loop>:
 2ea:	aa 1f       	adc	r26, r26
 2ec:	bb 1f       	adc	r27, r27
 2ee:	a6 17       	cp	r26, r22
 2f0:	b7 07       	cpc	r27, r23
 2f2:	10 f0       	brcs	.+4      	; 0x2f8 <__udivmodhi4_ep>
 2f4:	a6 1b       	sub	r26, r22
 2f6:	b7 0b       	sbc	r27, r23

000002f8 <__udivmodhi4_ep>:
 2f8:	88 1f       	adc	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	5a 95       	dec	r21
 2fe:	a9 f7       	brne	.-22     	; 0x2ea <__udivmodhi4_loop>
 300:	80 95       	com	r24
 302:	90 95       	com	r25
 304:	bc 01       	movw	r22, r24
 306:	cd 01       	movw	r24, r26
 308:	08 95       	ret

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
