
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000083a  000008ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000083a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000019d  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009b9  00000000  00000000  00000a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ce  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000727  00000000  00000000  00001612  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  00001d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000271  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000483  00000000  00000000  0000210d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000120  00000000  00000000  00002590  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 67 02 	call	0x4ce	; 0x4ce <main>
  8e:	0c 94 1b 04 	jmp	0x836	; 0x836 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ADC_INIT>:
uint16_t ADC_READ(uint8_t);

void ADC_INIT()
{
    // AREF = AVcc
    ADMUX = (1<<REFS0);
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	80 93 7c 00 	sts	0x007C, r24
 
    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  9c:	87 e8       	ldi	r24, 0x87	; 135
  9e:	80 93 7a 00 	sts	0x007A, r24
}
  a2:	08 95       	ret

000000a4 <ADC_READ>:
{
  // select the corresponding channel 0~7
  // ANDing with ’7' will always keep the value
  // of ‘ch’ between 0 and 7
  ch &= 0b00000111;  // AND operation with 7
  ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
  a4:	90 91 7c 00 	lds	r25, 0x007C
  a8:	87 70       	andi	r24, 0x07	; 7
  aa:	98 7f       	andi	r25, 0xF8	; 248
  ac:	89 2b       	or	r24, r25
  ae:	80 93 7c 00 	sts	0x007C, r24
 
  // start single convertion
  // write ’1' to ADSC
  ADCSRA |= (1<<ADSC);
  b2:	80 91 7a 00 	lds	r24, 0x007A
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 93 7a 00 	sts	0x007A, r24
 
  // wait for conversion to complete
  // ADSC becomes ’0' again
  // till then, run loop continuously
  while(ADCSRA & (1<<ADSC));
  bc:	80 91 7a 00 	lds	r24, 0x007A
  c0:	86 fd       	sbrc	r24, 6
  c2:	fc cf       	rjmp	.-8      	; 0xbc <ADC_READ+0x18>
 
  return (ADC);
  c4:	20 91 78 00 	lds	r18, 0x0078
  c8:	30 91 79 00 	lds	r19, 0x0079
}
  cc:	c9 01       	movw	r24, r18
  ce:	08 95       	ret

000000d0 <LCD_FLASH>:
	_delay_us(100);
}

void LCD_FLASH()
{
	LCD_CONTROL |=1<<EN;//Enable ON, LCD processing
  d0:	58 9a       	sbi	0x0b, 0	; 11
	asm volatile("nop");
  d2:	00 00       	nop
	asm volatile("nop");
  d4:	00 00       	nop
	asm volatile("nop");//Some delay
  d6:	00 00       	nop
	LCD_CONTROL &=~(1<<EN);//Enable OFF, LCD processing
  d8:	58 98       	cbi	0x0b, 0	; 11
}
  da:	08 95       	ret

000000dc <LCD_DATA>:
	LCD_FLASH();//LCD listens
	LCD_DT = 0;//PORTB set to 0
}

void LCD_DATA(unsigned char data)//Load data to LCD
{
  dc:	1f 93       	push	r17
  de:	18 2f       	mov	r17, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  e0:	81 e2       	ldi	r24, 0x21	; 33
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_DATA+0x6>
	_delay_us(100);
	LCD_CONTROL &=~(1<<RW);//Write mode
  e6:	5a 98       	cbi	0x0b, 2	; 11
	LCD_CONTROL |=1<<RS;//Output mode
  e8:	59 9a       	sbi	0x0b, 1	; 11
	LCD_DT = 0x00;//Clear PORTB
  ea:	15 b8       	out	0x05, r1	; 5
	LCD_DT = ((data>>4) & 0x0F);//Higher bits of command on PORTB
  ec:	81 2f       	mov	r24, r17
  ee:	82 95       	swap	r24
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	85 b9       	out	0x05, r24	; 5
	LCD_FLASH();//LCD listens
  f4:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_FLASH>
	LCD_DT = 0x00;//Clear PORTB
  f8:	15 b8       	out	0x05, r1	; 5
	LCD_DT = (data & 0x0F);//Lower bits of command on PORTB
  fa:	1f 70       	andi	r17, 0x0F	; 15
  fc:	15 b9       	out	0x05, r17	; 5
	LCD_FLASH();//LCD listens
  fe:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_FLASH>
	LCD_DT = 0;//PORTB set to 0
 102:	15 b8       	out	0x05, r1	; 5
}
 104:	1f 91       	pop	r17
 106:	08 95       	ret

00000108 <LCD_WRITE_STRING>:
	LCD_DATA(C);
	_delay_us(100);
}

void LCD_WRITE_STRING(char *string)
{
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ec 01       	movw	r28, r24
 110:	11 e2       	ldi	r17, 0x21	; 33
 112:	06 c0       	rjmp	.+12     	; 0x120 <LCD_WRITE_STRING+0x18>
	while(*string>0)
	{
		LCD_DATA(*string++);
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_DATA>
 11a:	81 2f       	mov	r24, r17
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_WRITE_STRING+0x14>
	_delay_us(100);
}

void LCD_WRITE_STRING(char *string)
{
	while(*string>0)
 120:	88 81       	ld	r24, Y
 122:	88 23       	and	r24, r24
 124:	b9 f7       	brne	.-18     	; 0x114 <LCD_WRITE_STRING+0xc>
	{
		LCD_DATA(*string++);
		_delay_us(100);
	}
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	08 95       	ret

0000012e <LCD_WRITE_CHAR>:
	LCD_DT = 0;//PORTB set to 0
}

void LCD_WRITE_CHAR(char C)
{
	LCD_DATA(C);
 12e:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_DATA>
 132:	81 e2       	ldi	r24, 0x21	; 33
 134:	8a 95       	dec	r24
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_WRITE_CHAR+0x6>
	_delay_us(100);
}
 138:	08 95       	ret

0000013a <LCD_CMD>:
	_delay_us(50);
	LCD_CMD(0x80);//Set cursor to 1st position on display
}

void LCD_CMD(unsigned char cmd)//Give command to LCD
{
 13a:	1f 93       	push	r17
 13c:	18 2f       	mov	r17, r24
 13e:	81 e2       	ldi	r24, 0x21	; 33
 140:	8a 95       	dec	r24
 142:	f1 f7       	brne	.-4      	; 0x140 <LCD_CMD+0x6>
	_delay_us(100);
	LCD_CONTROL &=~((1<<RW)|(1<<RS));//Write mode and Command mode
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	89 7f       	andi	r24, 0xF9	; 249
 148:	8b b9       	out	0x0b, r24	; 11
	LCD_DT = 0x00;//Clear PORTB
 14a:	15 b8       	out	0x05, r1	; 5
	LCD_DT = ((cmd>>4) & 0x0F);//Higher bits of command on PORTB
 14c:	81 2f       	mov	r24, r17
 14e:	82 95       	swap	r24
 150:	8f 70       	andi	r24, 0x0F	; 15
 152:	85 b9       	out	0x05, r24	; 5
	LCD_FLASH();//LCD listens
 154:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_FLASH>
	LCD_DT = 0x00;//Clear PORTB
 158:	15 b8       	out	0x05, r1	; 5
	LCD_DT = (cmd & 0x0F);//Lower bits of command on PORTB
 15a:	1f 70       	andi	r17, 0x0F	; 15
 15c:	15 b9       	out	0x05, r17	; 5
	LCD_FLASH();//LCD listens
 15e:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_FLASH>
	LCD_DT = 0;//PORTB set to 0
 162:	15 b8       	out	0x05, r1	; 5
}
 164:	1f 91       	pop	r17
 166:	08 95       	ret

00000168 <LCD_CLEAR>:
	_delay_ms(1);
}

void LCD_CLEAR()
{
	LCD_CMD(0x01);//Clear screen
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_CMD>
 16e:	81 e2       	ldi	r24, 0x21	; 33
 170:	8a 95       	dec	r24
 172:	f1 f7       	brne	.-4      	; 0x170 <LCD_CLEAR+0x8>
	_delay_us(100);
}
 174:	08 95       	ret

00000176 <LCD_SETCURSOR>:
	_delay_us(100);
}

void LCD_SETCURSOR(uint8_t x, uint8_t y)
{
	LCD_CMD(0x80 + InitColumn[y-1] + x-1);
 176:	81 58       	subi	r24, 0x81	; 129
 178:	ec e1       	ldi	r30, 0x1C	; 28
 17a:	f1 e0       	ldi	r31, 0x01	; 1
 17c:	e6 0f       	add	r30, r22
 17e:	f1 1d       	adc	r31, r1
 180:	90 81       	ld	r25, Z
 182:	89 0f       	add	r24, r25
 184:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_CMD>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 188:	8a ef       	ldi	r24, 0xFA	; 250
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_SETCURSOR+0x16>
	_delay_ms(1);
}
 190:	08 95       	ret

00000192 <LCD_INIT>:
void LCD_CLEAR_LINE(uint8_t);

unsigned char InitColumn[2]={0,64};

void LCD_INIT()
{
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	04 ef       	ldi	r16, 0xF4	; 244
 198:	11 e0       	ldi	r17, 0x01	; 1
 19a:	c8 01       	movw	r24, r16
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_INIT+0xa>
	_delay_ms(2);
	DATADIR_PORTD |= (1<<EN|1<<RS|1<<RW);//Enable, RS, RW OUTPUT
 1a0:	8a b1       	in	r24, 0x0a	; 10
 1a2:	87 60       	ori	r24, 0x07	; 7
 1a4:	8a b9       	out	0x0a, r24	; 10
	DATADIR_PORTB = 0xFF;//PORTB output
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	84 b9       	out	0x04, r24	; 4
 1aa:	88 e8       	ldi	r24, 0x88	; 136
 1ac:	93 e1       	ldi	r25, 0x13	; 19
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCD_INIT+0x1c>
	_delay_ms(20);
	LCD_CMD(0x30);//Initialisation of LCD
 1b2:	80 e3       	ldi	r24, 0x30	; 48
 1b4:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_CMD>
	LCD_CMD(0x30);//       "         "
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_CMD>
	LCD_CMD(0X20);//       "         "
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_CMD>
	LCD_CMD(0x01);//Clear Screen
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_CMD>
 1ca:	c8 01       	movw	r24, r16
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCD_INIT+0x3a>
	_delay_ms(2);
	LCD_CMD(0x28);//4-bit mode
 1d0:	88 e2       	ldi	r24, 0x28	; 40
 1d2:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_CMD>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1d6:	10 e1       	ldi	r17, 0x10	; 16
 1d8:	81 2f       	mov	r24, r17
 1da:	8a 95       	dec	r24
 1dc:	f1 f7       	brne	.-4      	; 0x1da <LCD_INIT+0x48>
	//LCD_CMD(0x038);//8-bit mode
	_delay_us(50);
	LCD_CMD(0x0C);//Display ON cursor OFF
 1de:	8c e0       	ldi	r24, 0x0C	; 12
 1e0:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_CMD>
 1e4:	81 2f       	mov	r24, r17
 1e6:	8a 95       	dec	r24
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_INIT+0x54>
	_delay_us(50);
	//LCD_CMD(0x06);//Cursor Auto-increment
	_delay_us(50);
	LCD_CMD(0x80);//Set cursor to 1st position on display
 1ea:	1a 95       	dec	r17
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_INIT+0x58>
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_CMD>
}
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	08 95       	ret

000001fa <LCD_SHIFT_DISPLAY_LEFT>:
	asm volatile("nop");//Some delay
	LCD_CONTROL &=~(1<<EN);//Enable OFF, LCD processing
}
void LCD_SHIFT_DISPLAY_LEFT()
{
    LCD_CMD(0x18);//Shift display left
 1fa:	88 e1       	ldi	r24, 0x18	; 24
 1fc:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_CMD>
 200:	81 e2       	ldi	r24, 0x21	; 33
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <LCD_SHIFT_DISPLAY_LEFT+0x8>
    _delay_us(100);
}
 206:	08 95       	ret

00000208 <LCD_SHIFT_DISPLAY_RIGHT>:

void LCD_SHIFT_DISPLAY_RIGHT()
{
    LCD_CMD(0x1C);//Shift display right
 208:	8c e1       	ldi	r24, 0x1C	; 28
 20a:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_CMD>
 20e:	81 e2       	ldi	r24, 0x21	; 33
 210:	8a 95       	dec	r24
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_SHIFT_DISPLAY_RIGHT+0x8>
    _delay_us(100);
}
 214:	08 95       	ret

00000216 <LCD_SCROLL_LEFT>:

void LCD_SCROLL_LEFT(uint8_t scrollamount,unsigned int scrolldelayms)
{
 216:	2f 92       	push	r2
 218:	3f 92       	push	r3
 21a:	4f 92       	push	r4
 21c:	5f 92       	push	r5
 21e:	6f 92       	push	r6
 220:	7f 92       	push	r7
 222:	8f 92       	push	r8
 224:	9f 92       	push	r9
 226:	af 92       	push	r10
 228:	bf 92       	push	r11
 22a:	cf 92       	push	r12
 22c:	df 92       	push	r13
 22e:	ef 92       	push	r14
 230:	ff 92       	push	r15
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	c0 e0       	ldi	r28, 0x00	; 0
 23c:	d0 e0       	ldi	r29, 0x00	; 0
    for(int i=0;i<scrollamount; i++ )
 23e:	48 2e       	mov	r4, r24
 240:	55 24       	eor	r5, r5
    {
        LCD_SHIFT_DISPLAY_LEFT();
        _delay_ms(scrolldelayms);
 242:	3b 01       	movw	r6, r22
 244:	88 24       	eor	r8, r8
 246:	99 24       	eor	r9, r9
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 248:	89 e1       	ldi	r24, 0x19	; 25
 24a:	28 2e       	mov	r2, r24
 24c:	31 2c       	mov	r3, r1
 24e:	41 c0       	rjmp	.+130    	; 0x2d2 <LCD_SCROLL_LEFT+0xbc>

void LCD_SCROLL_LEFT(uint8_t scrollamount,unsigned int scrolldelayms)
{
    for(int i=0;i<scrollamount; i++ )
    {
        LCD_SHIFT_DISPLAY_LEFT();
 250:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_SHIFT_DISPLAY_LEFT>
        _delay_ms(scrolldelayms);
 254:	c4 01       	movw	r24, r8
 256:	b3 01       	movw	r22, r6
 258:	0e 94 bd 02 	call	0x57a	; 0x57a <__floatunsisf>
 25c:	5b 01       	movw	r10, r22
 25e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	4a e7       	ldi	r20, 0x7A	; 122
 266:	53 e4       	ldi	r21, 0x43	; 67
 268:	0e 94 4b 03 	call	0x696	; 0x696 <__mulsf3>
 26c:	7b 01       	movw	r14, r22
 26e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	40 e8       	ldi	r20, 0x80	; 128
 276:	5f e3       	ldi	r21, 0x3F	; 63
 278:	0e 94 8d 02 	call	0x51a	; 0x51a <__cmpsf2>
 27c:	88 23       	and	r24, r24
 27e:	1c f4       	brge	.+6      	; 0x286 <LCD_SCROLL_LEFT+0x70>
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	22 c0       	rjmp	.+68     	; 0x2ca <LCD_SCROLL_LEFT+0xb4>
		__ticks = 1;
	else if (__tmp > 65535)
 286:	c8 01       	movw	r24, r16
 288:	b7 01       	movw	r22, r14
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	3f ef       	ldi	r19, 0xFF	; 255
 28e:	4f e7       	ldi	r20, 0x7F	; 127
 290:	57 e4       	ldi	r21, 0x47	; 71
 292:	0e 94 47 03 	call	0x68e	; 0x68e <__gesf2>
 296:	18 16       	cp	r1, r24
 298:	a4 f4       	brge	.+40     	; 0x2c2 <LCD_SCROLL_LEFT+0xac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 29a:	c6 01       	movw	r24, r12
 29c:	b5 01       	movw	r22, r10
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	40 e2       	ldi	r20, 0x20	; 32
 2a4:	51 e4       	ldi	r21, 0x41	; 65
 2a6:	0e 94 4b 03 	call	0x696	; 0x696 <__mulsf3>
 2aa:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <LCD_SCROLL_LEFT+0xa4>
 2b0:	c1 01       	movw	r24, r2
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_SCROLL_LEFT+0x9c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b6:	61 50       	subi	r22, 0x01	; 1
 2b8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ba:	61 15       	cp	r22, r1
 2bc:	71 05       	cpc	r23, r1
 2be:	c1 f7       	brne	.-16     	; 0x2b0 <LCD_SCROLL_LEFT+0x9a>
 2c0:	07 c0       	rjmp	.+14     	; 0x2d0 <LCD_SCROLL_LEFT+0xba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2c2:	c8 01       	movw	r24, r16
 2c4:	b7 01       	movw	r22, r14
 2c6:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
 2ca:	cb 01       	movw	r24, r22
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_SCROLL_LEFT+0xb6>
    _delay_us(100);
}

void LCD_SCROLL_LEFT(uint8_t scrollamount,unsigned int scrolldelayms)
{
    for(int i=0;i<scrollamount; i++ )
 2d0:	21 96       	adiw	r28, 0x01	; 1
 2d2:	c4 15       	cp	r28, r4
 2d4:	d5 05       	cpc	r29, r5
 2d6:	0c f4       	brge	.+2      	; 0x2da <LCD_SCROLL_LEFT+0xc4>
 2d8:	bb cf       	rjmp	.-138    	; 0x250 <LCD_SCROLL_LEFT+0x3a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2da:	81 e2       	ldi	r24, 0x21	; 33
 2dc:	8a 95       	dec	r24
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_SCROLL_LEFT+0xc6>
    {
        LCD_SHIFT_DISPLAY_LEFT();
        _delay_ms(scrolldelayms);
    }
	_delay_us(100);
}
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	df 90       	pop	r13
 2ee:	cf 90       	pop	r12
 2f0:	bf 90       	pop	r11
 2f2:	af 90       	pop	r10
 2f4:	9f 90       	pop	r9
 2f6:	8f 90       	pop	r8
 2f8:	7f 90       	pop	r7
 2fa:	6f 90       	pop	r6
 2fc:	5f 90       	pop	r5
 2fe:	4f 90       	pop	r4
 300:	3f 90       	pop	r3
 302:	2f 90       	pop	r2
 304:	08 95       	ret

00000306 <LCD_SCROLL_RIGHT>:

void LCD_SCROLL_RIGHT(uint8_t scrollamount,unsigned int scrolldelayms)
{
 306:	2f 92       	push	r2
 308:	3f 92       	push	r3
 30a:	4f 92       	push	r4
 30c:	5f 92       	push	r5
 30e:	6f 92       	push	r6
 310:	7f 92       	push	r7
 312:	8f 92       	push	r8
 314:	9f 92       	push	r9
 316:	af 92       	push	r10
 318:	bf 92       	push	r11
 31a:	cf 92       	push	r12
 31c:	df 92       	push	r13
 31e:	ef 92       	push	r14
 320:	ff 92       	push	r15
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	c0 e0       	ldi	r28, 0x00	; 0
 32c:	d0 e0       	ldi	r29, 0x00	; 0
    for(int i=0; i<scrollamount; i++ )
 32e:	48 2e       	mov	r4, r24
 330:	55 24       	eor	r5, r5
    {
        LCD_SHIFT_DISPLAY_RIGHT();
        _delay_ms(scrolldelayms);
 332:	3b 01       	movw	r6, r22
 334:	88 24       	eor	r8, r8
 336:	99 24       	eor	r9, r9
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 338:	99 e1       	ldi	r25, 0x19	; 25
 33a:	29 2e       	mov	r2, r25
 33c:	31 2c       	mov	r3, r1
 33e:	41 c0       	rjmp	.+130    	; 0x3c2 <LCD_SCROLL_RIGHT+0xbc>

void LCD_SCROLL_RIGHT(uint8_t scrollamount,unsigned int scrolldelayms)
{
    for(int i=0; i<scrollamount; i++ )
    {
        LCD_SHIFT_DISPLAY_RIGHT();
 340:	0e 94 04 01 	call	0x208	; 0x208 <LCD_SHIFT_DISPLAY_RIGHT>
        _delay_ms(scrolldelayms);
 344:	c4 01       	movw	r24, r8
 346:	b3 01       	movw	r22, r6
 348:	0e 94 bd 02 	call	0x57a	; 0x57a <__floatunsisf>
 34c:	5b 01       	movw	r10, r22
 34e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	4a e7       	ldi	r20, 0x7A	; 122
 356:	53 e4       	ldi	r21, 0x43	; 67
 358:	0e 94 4b 03 	call	0x696	; 0x696 <__mulsf3>
 35c:	7b 01       	movw	r14, r22
 35e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	40 e8       	ldi	r20, 0x80	; 128
 366:	5f e3       	ldi	r21, 0x3F	; 63
 368:	0e 94 8d 02 	call	0x51a	; 0x51a <__cmpsf2>
 36c:	88 23       	and	r24, r24
 36e:	1c f4       	brge	.+6      	; 0x376 <LCD_SCROLL_RIGHT+0x70>
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	22 c0       	rjmp	.+68     	; 0x3ba <LCD_SCROLL_RIGHT+0xb4>
		__ticks = 1;
	else if (__tmp > 65535)
 376:	c8 01       	movw	r24, r16
 378:	b7 01       	movw	r22, r14
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	3f ef       	ldi	r19, 0xFF	; 255
 37e:	4f e7       	ldi	r20, 0x7F	; 127
 380:	57 e4       	ldi	r21, 0x47	; 71
 382:	0e 94 47 03 	call	0x68e	; 0x68e <__gesf2>
 386:	18 16       	cp	r1, r24
 388:	a4 f4       	brge	.+40     	; 0x3b2 <LCD_SCROLL_RIGHT+0xac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 38a:	c6 01       	movw	r24, r12
 38c:	b5 01       	movw	r22, r10
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	40 e2       	ldi	r20, 0x20	; 32
 394:	51 e4       	ldi	r21, 0x41	; 65
 396:	0e 94 4b 03 	call	0x696	; 0x696 <__mulsf3>
 39a:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
 39e:	05 c0       	rjmp	.+10     	; 0x3aa <LCD_SCROLL_RIGHT+0xa4>
 3a0:	c1 01       	movw	r24, r2
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_SCROLL_RIGHT+0x9c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3a6:	61 50       	subi	r22, 0x01	; 1
 3a8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3aa:	61 15       	cp	r22, r1
 3ac:	71 05       	cpc	r23, r1
 3ae:	c1 f7       	brne	.-16     	; 0x3a0 <LCD_SCROLL_RIGHT+0x9a>
 3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <LCD_SCROLL_RIGHT+0xba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3b2:	c8 01       	movw	r24, r16
 3b4:	b7 01       	movw	r22, r14
 3b6:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
 3ba:	cb 01       	movw	r24, r22
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <LCD_SCROLL_RIGHT+0xb6>
	_delay_us(100);
}

void LCD_SCROLL_RIGHT(uint8_t scrollamount,unsigned int scrolldelayms)
{
    for(int i=0; i<scrollamount; i++ )
 3c0:	21 96       	adiw	r28, 0x01	; 1
 3c2:	c4 15       	cp	r28, r4
 3c4:	d5 05       	cpc	r29, r5
 3c6:	0c f4       	brge	.+2      	; 0x3ca <LCD_SCROLL_RIGHT+0xc4>
 3c8:	bb cf       	rjmp	.-138    	; 0x340 <LCD_SCROLL_RIGHT+0x3a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3ca:	81 e2       	ldi	r24, 0x21	; 33
 3cc:	8a 95       	dec	r24
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <LCD_SCROLL_RIGHT+0xc6>
    {
        LCD_SHIFT_DISPLAY_RIGHT();
        _delay_ms(scrolldelayms);
    }
	_delay_us(100);
}
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	0f 91       	pop	r16
 3d8:	ff 90       	pop	r15
 3da:	ef 90       	pop	r14
 3dc:	df 90       	pop	r13
 3de:	cf 90       	pop	r12
 3e0:	bf 90       	pop	r11
 3e2:	af 90       	pop	r10
 3e4:	9f 90       	pop	r9
 3e6:	8f 90       	pop	r8
 3e8:	7f 90       	pop	r7
 3ea:	6f 90       	pop	r6
 3ec:	5f 90       	pop	r5
 3ee:	4f 90       	pop	r4
 3f0:	3f 90       	pop	r3
 3f2:	2f 90       	pop	r2
 3f4:	08 95       	ret

000003f6 <LCD_CURSOR_LEFT>:

void LCD_CURSOR_LEFT(void)
{
	LCD_CMD(0x10);//Move cursor left by one digit
 3f6:	80 e1       	ldi	r24, 0x10	; 16
 3f8:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_CMD>
 3fc:	81 e2       	ldi	r24, 0x21	; 33
 3fe:	8a 95       	dec	r24
 400:	f1 f7       	brne	.-4      	; 0x3fe <LCD_CURSOR_LEFT+0x8>
	_delay_us(100);
}
 402:	08 95       	ret

00000404 <LCD_CURSOR_RIGHT>:
void LCD_CURSOR_RIGHT(void)
{
	LCD_CMD(0x14);//Move cursor right by one digit
 404:	84 e1       	ldi	r24, 0x14	; 20
 406:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_CMD>
 40a:	81 e2       	ldi	r24, 0x21	; 33
 40c:	8a 95       	dec	r24
 40e:	f1 f7       	brne	.-4      	; 0x40c <LCD_CURSOR_RIGHT+0x8>
	_delay_us(100);
}
 410:	08 95       	ret

00000412 <LCD_DISPLAY_CONTROL>:
#define ON 1
#define OFF 0
#define BLINK 2
void LCD_DISPLAY_CONTROL(uint8_t command)
{
	switch(command)
 412:	88 23       	and	r24, r24
 414:	21 f0       	breq	.+8      	; 0x41e <LCD_DISPLAY_CONTROL+0xc>
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	29 f4       	brne	.+10     	; 0x424 <LCD_DISPLAY_CONTROL+0x12>
	{
		case 1: LCD_CMD(0x0C);break;//Display ON
 41a:	8c e0       	ldi	r24, 0x0C	; 12
 41c:	01 c0       	rjmp	.+2      	; 0x420 <LCD_DISPLAY_CONTROL+0xe>
		case 0: LCD_CMD(0x08);break;//Display OFF
 41e:	88 e0       	ldi	r24, 0x08	; 8
 420:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_CMD>
 424:	81 e2       	ldi	r24, 0x21	; 33
 426:	8a 95       	dec	r24
 428:	f1 f7       	brne	.-4      	; 0x426 <LCD_DISPLAY_CONTROL+0x14>
	}
	_delay_us(100);
}
 42a:	08 95       	ret

0000042c <LCD_CURSOR_CONTROL>:

void LCD_CURSOR_CONTROL(uint8_t command)
{
	switch(command)
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	39 f0       	breq	.+14     	; 0x43e <LCD_CURSOR_CONTROL+0x12>
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	18 f0       	brcs	.+6      	; 0x43a <LCD_CURSOR_CONTROL+0xe>
 434:	82 30       	cpi	r24, 0x02	; 2
 436:	41 f4       	brne	.+16     	; 0x448 <LCD_CURSOR_CONTROL+0x1c>
 438:	04 c0       	rjmp	.+8      	; 0x442 <LCD_CURSOR_CONTROL+0x16>
	{
		case 0: LCD_CMD(0x0C);break; //Cursor OFF
 43a:	8c e0       	ldi	r24, 0x0C	; 12
 43c:	03 c0       	rjmp	.+6      	; 0x444 <LCD_CURSOR_CONTROL+0x18>
		case 1: LCD_CMD(0x0E);break;//Cursor ON
 43e:	8e e0       	ldi	r24, 0x0E	; 14
 440:	01 c0       	rjmp	.+2      	; 0x444 <LCD_CURSOR_CONTROL+0x18>
		case 2: LCD_CMD(0x0F);break;//Cursor blinking
 442:	8f e0       	ldi	r24, 0x0F	; 15
 444:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_CMD>
 448:	81 e2       	ldi	r24, 0x21	; 33
 44a:	8a 95       	dec	r24
 44c:	f1 f7       	brne	.-4      	; 0x44a <LCD_CURSOR_CONTROL+0x1e>
	}
	_delay_us(100);
}
 44e:	08 95       	ret

00000450 <LCD_CLEAR_LINE>:

void LCD_CLEAR_LINE(uint8_t line)
{
 450:	1f 93       	push	r17
 452:	18 2f       	mov	r17, r24
	LCD_SETCURSOR(1,line);
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	61 2f       	mov	r22, r17
 458:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_SETCURSOR>
	LCD_WRITE_STRING("                ");
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	0e 94 84 00 	call	0x108	; 0x108 <LCD_WRITE_STRING>
	LCD_SETCURSOR(1,line);
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	61 2f       	mov	r22, r17
 468:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_SETCURSOR>

}
 46c:	1f 91       	pop	r17
 46e:	08 95       	ret

00000470 <LCD_WRITE_NUM>:
		_delay_us(100);
	}
}

void LCD_WRITE_NUM(unsigned char val, unsigned char width)
{
 470:	ef 92       	push	r14
 472:	ff 92       	push	r15
 474:	0f 93       	push	r16
 476:	1f 93       	push	r17
 478:	df 93       	push	r29
 47a:	cf 93       	push	r28
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
	unsigned char array[width];
	itoa(val,array,10);
	LCD_WRITE_STRING(array);
	_delay_us(100);
}
 480:	ed b6       	in	r14, 0x3d	; 61
 482:	fe b6       	in	r15, 0x3e	; 62
	}
}

void LCD_WRITE_NUM(unsigned char val, unsigned char width)
{
	unsigned char array[width];
 484:	2d b7       	in	r18, 0x3d	; 61
 486:	3e b7       	in	r19, 0x3e	; 62
 488:	26 1b       	sub	r18, r22
 48a:	31 09       	sbc	r19, r1
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	3e bf       	out	0x3e, r19	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	2d bf       	out	0x3d, r18	; 61
 496:	0d b7       	in	r16, 0x3d	; 61
 498:	1e b7       	in	r17, 0x3e	; 62
 49a:	0f 5f       	subi	r16, 0xFF	; 255
 49c:	1f 4f       	sbci	r17, 0xFF	; 255
	itoa(val,array,10);
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	b8 01       	movw	r22, r16
 4a2:	4a e0       	ldi	r20, 0x0A	; 10
 4a4:	50 e0       	ldi	r21, 0x00	; 0
 4a6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <itoa>
	LCD_WRITE_STRING(array);
 4aa:	c8 01       	movw	r24, r16
 4ac:	0e 94 84 00 	call	0x108	; 0x108 <LCD_WRITE_STRING>
 4b0:	81 e2       	ldi	r24, 0x21	; 33
 4b2:	8a 95       	dec	r24
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <LCD_WRITE_NUM+0x42>
	_delay_us(100);
}
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	f8 94       	cli
 4ba:	fe be       	out	0x3e, r15	; 62
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	ed be       	out	0x3d, r14	; 61
 4c0:	cf 91       	pop	r28
 4c2:	df 91       	pop	r29
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	08 95       	ret

000004ce <main>:
#include <util/delay.h>



int main(void)
{
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
	uint16_t adcval;
	LCD_INIT();
 4d2:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_INIT>
uint16_t ADC_READ(uint8_t);

void ADC_INIT()
{
    // AREF = AVcc
    ADMUX = (1<<REFS0);
 4d6:	80 e4       	ldi	r24, 0x40	; 64
 4d8:	80 93 7c 00 	sts	0x007C, r24
 
    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 4dc:	87 e8       	ldi	r24, 0x87	; 135
 4de:	80 93 7a 00 	sts	0x007A, r24
	ADC_INIT();
	LCD_SETCURSOR(1,1);
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_SETCURSOR>
	LCD_WRITE_STRING("Swapneel");
 4ea:	81 e1       	ldi	r24, 0x11	; 17
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	0e 94 84 00 	call	0x108	; 0x108 <LCD_WRITE_STRING>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4f2:	c8 ea       	ldi	r28, 0xA8	; 168
 4f4:	d1 e6       	ldi	r29, 0x61	; 97
	while(1)
	{
		LCD_SETCURSOR(1,1);
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_SETCURSOR>
		adcval=ADC_READ(5);
 4fe:	85 e0       	ldi	r24, 0x05	; 5
 500:	0e 94 52 00 	call	0xa4	; 0xa4 <ADC_READ>
		LCD_WRITE_NUM((int) adcval,4);
 504:	64 e0       	ldi	r22, 0x04	; 4
 506:	0e 94 38 02 	call	0x470	; 0x470 <LCD_WRITE_NUM>
		LCD_WRITE_STRING("  ");
 50a:	8a e1       	ldi	r24, 0x1A	; 26
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 84 00 	call	0x108	; 0x108 <LCD_WRITE_STRING>
 512:	ce 01       	movw	r24, r28
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <main+0x46>
 518:	ee cf       	rjmp	.-36     	; 0x4f6 <main+0x28>

0000051a <__cmpsf2>:
 51a:	6c d0       	rcall	.+216    	; 0x5f4 <__fp_cmp>
 51c:	08 f4       	brcc	.+2      	; 0x520 <__cmpsf2+0x6>
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	08 95       	ret

00000522 <__fixunssfsi>:
 522:	94 d0       	rcall	.+296    	; 0x64c <__fp_splitA>
 524:	88 f0       	brcs	.+34     	; 0x548 <__fixunssfsi+0x26>
 526:	9f 57       	subi	r25, 0x7F	; 127
 528:	90 f0       	brcs	.+36     	; 0x54e <__fixunssfsi+0x2c>
 52a:	b9 2f       	mov	r27, r25
 52c:	99 27       	eor	r25, r25
 52e:	b7 51       	subi	r27, 0x17	; 23
 530:	a0 f0       	brcs	.+40     	; 0x55a <__fixunssfsi+0x38>
 532:	d1 f0       	breq	.+52     	; 0x568 <__fixunssfsi+0x46>
 534:	66 0f       	add	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	88 1f       	adc	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	1a f0       	brmi	.+6      	; 0x544 <__fixunssfsi+0x22>
 53e:	ba 95       	dec	r27
 540:	c9 f7       	brne	.-14     	; 0x534 <__fixunssfsi+0x12>
 542:	12 c0       	rjmp	.+36     	; 0x568 <__fixunssfsi+0x46>
 544:	b1 30       	cpi	r27, 0x01	; 1
 546:	81 f0       	breq	.+32     	; 0x568 <__fixunssfsi+0x46>
 548:	9b d0       	rcall	.+310    	; 0x680 <__fp_zero>
 54a:	b1 e0       	ldi	r27, 0x01	; 1
 54c:	08 95       	ret
 54e:	98 c0       	rjmp	.+304    	; 0x680 <__fp_zero>
 550:	67 2f       	mov	r22, r23
 552:	78 2f       	mov	r23, r24
 554:	88 27       	eor	r24, r24
 556:	b8 5f       	subi	r27, 0xF8	; 248
 558:	39 f0       	breq	.+14     	; 0x568 <__fixunssfsi+0x46>
 55a:	b9 3f       	cpi	r27, 0xF9	; 249
 55c:	cc f3       	brlt	.-14     	; 0x550 <__fixunssfsi+0x2e>
 55e:	86 95       	lsr	r24
 560:	77 95       	ror	r23
 562:	67 95       	ror	r22
 564:	b3 95       	inc	r27
 566:	d9 f7       	brne	.-10     	; 0x55e <__fixunssfsi+0x3c>
 568:	3e f4       	brtc	.+14     	; 0x578 <__fixunssfsi+0x56>
 56a:	90 95       	com	r25
 56c:	80 95       	com	r24
 56e:	70 95       	com	r23
 570:	61 95       	neg	r22
 572:	7f 4f       	sbci	r23, 0xFF	; 255
 574:	8f 4f       	sbci	r24, 0xFF	; 255
 576:	9f 4f       	sbci	r25, 0xFF	; 255
 578:	08 95       	ret

0000057a <__floatunsisf>:
 57a:	e8 94       	clt
 57c:	09 c0       	rjmp	.+18     	; 0x590 <__floatsisf+0x12>

0000057e <__floatsisf>:
 57e:	97 fb       	bst	r25, 7
 580:	3e f4       	brtc	.+14     	; 0x590 <__floatsisf+0x12>
 582:	90 95       	com	r25
 584:	80 95       	com	r24
 586:	70 95       	com	r23
 588:	61 95       	neg	r22
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	8f 4f       	sbci	r24, 0xFF	; 255
 58e:	9f 4f       	sbci	r25, 0xFF	; 255
 590:	99 23       	and	r25, r25
 592:	a9 f0       	breq	.+42     	; 0x5be <__floatsisf+0x40>
 594:	f9 2f       	mov	r31, r25
 596:	96 e9       	ldi	r25, 0x96	; 150
 598:	bb 27       	eor	r27, r27
 59a:	93 95       	inc	r25
 59c:	f6 95       	lsr	r31
 59e:	87 95       	ror	r24
 5a0:	77 95       	ror	r23
 5a2:	67 95       	ror	r22
 5a4:	b7 95       	ror	r27
 5a6:	f1 11       	cpse	r31, r1
 5a8:	f8 cf       	rjmp	.-16     	; 0x59a <__floatsisf+0x1c>
 5aa:	fa f4       	brpl	.+62     	; 0x5ea <__floatsisf+0x6c>
 5ac:	bb 0f       	add	r27, r27
 5ae:	11 f4       	brne	.+4      	; 0x5b4 <__floatsisf+0x36>
 5b0:	60 ff       	sbrs	r22, 0
 5b2:	1b c0       	rjmp	.+54     	; 0x5ea <__floatsisf+0x6c>
 5b4:	6f 5f       	subi	r22, 0xFF	; 255
 5b6:	7f 4f       	sbci	r23, 0xFF	; 255
 5b8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ba:	9f 4f       	sbci	r25, 0xFF	; 255
 5bc:	16 c0       	rjmp	.+44     	; 0x5ea <__floatsisf+0x6c>
 5be:	88 23       	and	r24, r24
 5c0:	11 f0       	breq	.+4      	; 0x5c6 <__floatsisf+0x48>
 5c2:	96 e9       	ldi	r25, 0x96	; 150
 5c4:	11 c0       	rjmp	.+34     	; 0x5e8 <__floatsisf+0x6a>
 5c6:	77 23       	and	r23, r23
 5c8:	21 f0       	breq	.+8      	; 0x5d2 <__floatsisf+0x54>
 5ca:	9e e8       	ldi	r25, 0x8E	; 142
 5cc:	87 2f       	mov	r24, r23
 5ce:	76 2f       	mov	r23, r22
 5d0:	05 c0       	rjmp	.+10     	; 0x5dc <__floatsisf+0x5e>
 5d2:	66 23       	and	r22, r22
 5d4:	71 f0       	breq	.+28     	; 0x5f2 <__floatsisf+0x74>
 5d6:	96 e8       	ldi	r25, 0x86	; 134
 5d8:	86 2f       	mov	r24, r22
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	2a f0       	brmi	.+10     	; 0x5ea <__floatsisf+0x6c>
 5e0:	9a 95       	dec	r25
 5e2:	66 0f       	add	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	da f7       	brpl	.-10     	; 0x5e0 <__floatsisf+0x62>
 5ea:	88 0f       	add	r24, r24
 5ec:	96 95       	lsr	r25
 5ee:	87 95       	ror	r24
 5f0:	97 f9       	bld	r25, 7
 5f2:	08 95       	ret

000005f4 <__fp_cmp>:
 5f4:	99 0f       	add	r25, r25
 5f6:	00 08       	sbc	r0, r0
 5f8:	55 0f       	add	r21, r21
 5fa:	aa 0b       	sbc	r26, r26
 5fc:	e0 e8       	ldi	r30, 0x80	; 128
 5fe:	fe ef       	ldi	r31, 0xFE	; 254
 600:	16 16       	cp	r1, r22
 602:	17 06       	cpc	r1, r23
 604:	e8 07       	cpc	r30, r24
 606:	f9 07       	cpc	r31, r25
 608:	c0 f0       	brcs	.+48     	; 0x63a <__fp_cmp+0x46>
 60a:	12 16       	cp	r1, r18
 60c:	13 06       	cpc	r1, r19
 60e:	e4 07       	cpc	r30, r20
 610:	f5 07       	cpc	r31, r21
 612:	98 f0       	brcs	.+38     	; 0x63a <__fp_cmp+0x46>
 614:	62 1b       	sub	r22, r18
 616:	73 0b       	sbc	r23, r19
 618:	84 0b       	sbc	r24, r20
 61a:	95 0b       	sbc	r25, r21
 61c:	39 f4       	brne	.+14     	; 0x62c <__fp_cmp+0x38>
 61e:	0a 26       	eor	r0, r26
 620:	61 f0       	breq	.+24     	; 0x63a <__fp_cmp+0x46>
 622:	23 2b       	or	r18, r19
 624:	24 2b       	or	r18, r20
 626:	25 2b       	or	r18, r21
 628:	21 f4       	brne	.+8      	; 0x632 <__fp_cmp+0x3e>
 62a:	08 95       	ret
 62c:	0a 26       	eor	r0, r26
 62e:	09 f4       	brne	.+2      	; 0x632 <__fp_cmp+0x3e>
 630:	a1 40       	sbci	r26, 0x01	; 1
 632:	a6 95       	lsr	r26
 634:	8f ef       	ldi	r24, 0xFF	; 255
 636:	81 1d       	adc	r24, r1
 638:	81 1d       	adc	r24, r1
 63a:	08 95       	ret

0000063c <__fp_split3>:
 63c:	57 fd       	sbrc	r21, 7
 63e:	90 58       	subi	r25, 0x80	; 128
 640:	44 0f       	add	r20, r20
 642:	55 1f       	adc	r21, r21
 644:	59 f0       	breq	.+22     	; 0x65c <__fp_splitA+0x10>
 646:	5f 3f       	cpi	r21, 0xFF	; 255
 648:	71 f0       	breq	.+28     	; 0x666 <__fp_splitA+0x1a>
 64a:	47 95       	ror	r20

0000064c <__fp_splitA>:
 64c:	88 0f       	add	r24, r24
 64e:	97 fb       	bst	r25, 7
 650:	99 1f       	adc	r25, r25
 652:	61 f0       	breq	.+24     	; 0x66c <__fp_splitA+0x20>
 654:	9f 3f       	cpi	r25, 0xFF	; 255
 656:	79 f0       	breq	.+30     	; 0x676 <__fp_splitA+0x2a>
 658:	87 95       	ror	r24
 65a:	08 95       	ret
 65c:	12 16       	cp	r1, r18
 65e:	13 06       	cpc	r1, r19
 660:	14 06       	cpc	r1, r20
 662:	55 1f       	adc	r21, r21
 664:	f2 cf       	rjmp	.-28     	; 0x64a <__fp_split3+0xe>
 666:	46 95       	lsr	r20
 668:	f1 df       	rcall	.-30     	; 0x64c <__fp_splitA>
 66a:	08 c0       	rjmp	.+16     	; 0x67c <__fp_splitA+0x30>
 66c:	16 16       	cp	r1, r22
 66e:	17 06       	cpc	r1, r23
 670:	18 06       	cpc	r1, r24
 672:	99 1f       	adc	r25, r25
 674:	f1 cf       	rjmp	.-30     	; 0x658 <__fp_splitA+0xc>
 676:	86 95       	lsr	r24
 678:	71 05       	cpc	r23, r1
 67a:	61 05       	cpc	r22, r1
 67c:	08 94       	sec
 67e:	08 95       	ret

00000680 <__fp_zero>:
 680:	e8 94       	clt

00000682 <__fp_szero>:
 682:	bb 27       	eor	r27, r27
 684:	66 27       	eor	r22, r22
 686:	77 27       	eor	r23, r23
 688:	cb 01       	movw	r24, r22
 68a:	97 f9       	bld	r25, 7
 68c:	08 95       	ret

0000068e <__gesf2>:
 68e:	b2 df       	rcall	.-156    	; 0x5f4 <__fp_cmp>
 690:	08 f4       	brcc	.+2      	; 0x694 <__gesf2+0x6>
 692:	8f ef       	ldi	r24, 0xFF	; 255
 694:	08 95       	ret

00000696 <__mulsf3>:
 696:	0b d0       	rcall	.+22     	; 0x6ae <__mulsf3x>
 698:	78 c0       	rjmp	.+240    	; 0x78a <__fp_round>
 69a:	69 d0       	rcall	.+210    	; 0x76e <__fp_pscA>
 69c:	28 f0       	brcs	.+10     	; 0x6a8 <__mulsf3+0x12>
 69e:	6e d0       	rcall	.+220    	; 0x77c <__fp_pscB>
 6a0:	18 f0       	brcs	.+6      	; 0x6a8 <__mulsf3+0x12>
 6a2:	95 23       	and	r25, r21
 6a4:	09 f0       	breq	.+2      	; 0x6a8 <__mulsf3+0x12>
 6a6:	5a c0       	rjmp	.+180    	; 0x75c <__fp_inf>
 6a8:	5f c0       	rjmp	.+190    	; 0x768 <__fp_nan>
 6aa:	11 24       	eor	r1, r1
 6ac:	ea cf       	rjmp	.-44     	; 0x682 <__fp_szero>

000006ae <__mulsf3x>:
 6ae:	c6 df       	rcall	.-116    	; 0x63c <__fp_split3>
 6b0:	a0 f3       	brcs	.-24     	; 0x69a <__mulsf3+0x4>

000006b2 <__mulsf3_pse>:
 6b2:	95 9f       	mul	r25, r21
 6b4:	d1 f3       	breq	.-12     	; 0x6aa <__mulsf3+0x14>
 6b6:	95 0f       	add	r25, r21
 6b8:	50 e0       	ldi	r21, 0x00	; 0
 6ba:	55 1f       	adc	r21, r21
 6bc:	62 9f       	mul	r22, r18
 6be:	f0 01       	movw	r30, r0
 6c0:	72 9f       	mul	r23, r18
 6c2:	bb 27       	eor	r27, r27
 6c4:	f0 0d       	add	r31, r0
 6c6:	b1 1d       	adc	r27, r1
 6c8:	63 9f       	mul	r22, r19
 6ca:	aa 27       	eor	r26, r26
 6cc:	f0 0d       	add	r31, r0
 6ce:	b1 1d       	adc	r27, r1
 6d0:	aa 1f       	adc	r26, r26
 6d2:	64 9f       	mul	r22, r20
 6d4:	66 27       	eor	r22, r22
 6d6:	b0 0d       	add	r27, r0
 6d8:	a1 1d       	adc	r26, r1
 6da:	66 1f       	adc	r22, r22
 6dc:	82 9f       	mul	r24, r18
 6de:	22 27       	eor	r18, r18
 6e0:	b0 0d       	add	r27, r0
 6e2:	a1 1d       	adc	r26, r1
 6e4:	62 1f       	adc	r22, r18
 6e6:	73 9f       	mul	r23, r19
 6e8:	b0 0d       	add	r27, r0
 6ea:	a1 1d       	adc	r26, r1
 6ec:	62 1f       	adc	r22, r18
 6ee:	83 9f       	mul	r24, r19
 6f0:	a0 0d       	add	r26, r0
 6f2:	61 1d       	adc	r22, r1
 6f4:	22 1f       	adc	r18, r18
 6f6:	74 9f       	mul	r23, r20
 6f8:	33 27       	eor	r19, r19
 6fa:	a0 0d       	add	r26, r0
 6fc:	61 1d       	adc	r22, r1
 6fe:	23 1f       	adc	r18, r19
 700:	84 9f       	mul	r24, r20
 702:	60 0d       	add	r22, r0
 704:	21 1d       	adc	r18, r1
 706:	82 2f       	mov	r24, r18
 708:	76 2f       	mov	r23, r22
 70a:	6a 2f       	mov	r22, r26
 70c:	11 24       	eor	r1, r1
 70e:	9f 57       	subi	r25, 0x7F	; 127
 710:	50 40       	sbci	r21, 0x00	; 0
 712:	8a f0       	brmi	.+34     	; 0x736 <__mulsf3_pse+0x84>
 714:	e1 f0       	breq	.+56     	; 0x74e <__mulsf3_pse+0x9c>
 716:	88 23       	and	r24, r24
 718:	4a f0       	brmi	.+18     	; 0x72c <__mulsf3_pse+0x7a>
 71a:	ee 0f       	add	r30, r30
 71c:	ff 1f       	adc	r31, r31
 71e:	bb 1f       	adc	r27, r27
 720:	66 1f       	adc	r22, r22
 722:	77 1f       	adc	r23, r23
 724:	88 1f       	adc	r24, r24
 726:	91 50       	subi	r25, 0x01	; 1
 728:	50 40       	sbci	r21, 0x00	; 0
 72a:	a9 f7       	brne	.-22     	; 0x716 <__mulsf3_pse+0x64>
 72c:	9e 3f       	cpi	r25, 0xFE	; 254
 72e:	51 05       	cpc	r21, r1
 730:	70 f0       	brcs	.+28     	; 0x74e <__mulsf3_pse+0x9c>
 732:	14 c0       	rjmp	.+40     	; 0x75c <__fp_inf>
 734:	a6 cf       	rjmp	.-180    	; 0x682 <__fp_szero>
 736:	5f 3f       	cpi	r21, 0xFF	; 255
 738:	ec f3       	brlt	.-6      	; 0x734 <__mulsf3_pse+0x82>
 73a:	98 3e       	cpi	r25, 0xE8	; 232
 73c:	dc f3       	brlt	.-10     	; 0x734 <__mulsf3_pse+0x82>
 73e:	86 95       	lsr	r24
 740:	77 95       	ror	r23
 742:	67 95       	ror	r22
 744:	b7 95       	ror	r27
 746:	f7 95       	ror	r31
 748:	e7 95       	ror	r30
 74a:	9f 5f       	subi	r25, 0xFF	; 255
 74c:	c1 f7       	brne	.-16     	; 0x73e <__mulsf3_pse+0x8c>
 74e:	fe 2b       	or	r31, r30
 750:	88 0f       	add	r24, r24
 752:	91 1d       	adc	r25, r1
 754:	96 95       	lsr	r25
 756:	87 95       	ror	r24
 758:	97 f9       	bld	r25, 7
 75a:	08 95       	ret

0000075c <__fp_inf>:
 75c:	97 f9       	bld	r25, 7
 75e:	9f 67       	ori	r25, 0x7F	; 127
 760:	80 e8       	ldi	r24, 0x80	; 128
 762:	70 e0       	ldi	r23, 0x00	; 0
 764:	60 e0       	ldi	r22, 0x00	; 0
 766:	08 95       	ret

00000768 <__fp_nan>:
 768:	9f ef       	ldi	r25, 0xFF	; 255
 76a:	80 ec       	ldi	r24, 0xC0	; 192
 76c:	08 95       	ret

0000076e <__fp_pscA>:
 76e:	00 24       	eor	r0, r0
 770:	0a 94       	dec	r0
 772:	16 16       	cp	r1, r22
 774:	17 06       	cpc	r1, r23
 776:	18 06       	cpc	r1, r24
 778:	09 06       	cpc	r0, r25
 77a:	08 95       	ret

0000077c <__fp_pscB>:
 77c:	00 24       	eor	r0, r0
 77e:	0a 94       	dec	r0
 780:	12 16       	cp	r1, r18
 782:	13 06       	cpc	r1, r19
 784:	14 06       	cpc	r1, r20
 786:	05 06       	cpc	r0, r21
 788:	08 95       	ret

0000078a <__fp_round>:
 78a:	09 2e       	mov	r0, r25
 78c:	03 94       	inc	r0
 78e:	00 0c       	add	r0, r0
 790:	11 f4       	brne	.+4      	; 0x796 <__fp_round+0xc>
 792:	88 23       	and	r24, r24
 794:	52 f0       	brmi	.+20     	; 0x7aa <__fp_round+0x20>
 796:	bb 0f       	add	r27, r27
 798:	40 f4       	brcc	.+16     	; 0x7aa <__fp_round+0x20>
 79a:	bf 2b       	or	r27, r31
 79c:	11 f4       	brne	.+4      	; 0x7a2 <__fp_round+0x18>
 79e:	60 ff       	sbrs	r22, 0
 7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fp_round+0x20>
 7a2:	6f 5f       	subi	r22, 0xFF	; 255
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	8f 4f       	sbci	r24, 0xFF	; 255
 7a8:	9f 4f       	sbci	r25, 0xFF	; 255
 7aa:	08 95       	ret

000007ac <itoa>:
 7ac:	fb 01       	movw	r30, r22
 7ae:	9f 01       	movw	r18, r30
 7b0:	e8 94       	clt
 7b2:	42 30       	cpi	r20, 0x02	; 2
 7b4:	c4 f0       	brlt	.+48     	; 0x7e6 <itoa+0x3a>
 7b6:	45 32       	cpi	r20, 0x25	; 37
 7b8:	b4 f4       	brge	.+44     	; 0x7e6 <itoa+0x3a>
 7ba:	4a 30       	cpi	r20, 0x0A	; 10
 7bc:	29 f4       	brne	.+10     	; 0x7c8 <itoa+0x1c>
 7be:	97 fb       	bst	r25, 7
 7c0:	1e f4       	brtc	.+6      	; 0x7c8 <itoa+0x1c>
 7c2:	90 95       	com	r25
 7c4:	81 95       	neg	r24
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	64 2f       	mov	r22, r20
 7ca:	77 27       	eor	r23, r23
 7cc:	0e 94 07 04 	call	0x80e	; 0x80e <__udivmodhi4>
 7d0:	80 5d       	subi	r24, 0xD0	; 208
 7d2:	8a 33       	cpi	r24, 0x3A	; 58
 7d4:	0c f0       	brlt	.+2      	; 0x7d8 <itoa+0x2c>
 7d6:	89 5d       	subi	r24, 0xD9	; 217
 7d8:	81 93       	st	Z+, r24
 7da:	cb 01       	movw	r24, r22
 7dc:	00 97       	sbiw	r24, 0x00	; 0
 7de:	a1 f7       	brne	.-24     	; 0x7c8 <itoa+0x1c>
 7e0:	16 f4       	brtc	.+4      	; 0x7e6 <itoa+0x3a>
 7e2:	5d e2       	ldi	r21, 0x2D	; 45
 7e4:	51 93       	st	Z+, r21
 7e6:	10 82       	st	Z, r1
 7e8:	c9 01       	movw	r24, r18
 7ea:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <strrev>

000007ee <strrev>:
 7ee:	dc 01       	movw	r26, r24
 7f0:	fc 01       	movw	r30, r24
 7f2:	67 2f       	mov	r22, r23
 7f4:	71 91       	ld	r23, Z+
 7f6:	77 23       	and	r23, r23
 7f8:	e1 f7       	brne	.-8      	; 0x7f2 <strrev+0x4>
 7fa:	32 97       	sbiw	r30, 0x02	; 2
 7fc:	04 c0       	rjmp	.+8      	; 0x806 <strrev+0x18>
 7fe:	7c 91       	ld	r23, X
 800:	6d 93       	st	X+, r22
 802:	70 83       	st	Z, r23
 804:	62 91       	ld	r22, -Z
 806:	ae 17       	cp	r26, r30
 808:	bf 07       	cpc	r27, r31
 80a:	c8 f3       	brcs	.-14     	; 0x7fe <strrev+0x10>
 80c:	08 95       	ret

0000080e <__udivmodhi4>:
 80e:	aa 1b       	sub	r26, r26
 810:	bb 1b       	sub	r27, r27
 812:	51 e1       	ldi	r21, 0x11	; 17
 814:	07 c0       	rjmp	.+14     	; 0x824 <__udivmodhi4_ep>

00000816 <__udivmodhi4_loop>:
 816:	aa 1f       	adc	r26, r26
 818:	bb 1f       	adc	r27, r27
 81a:	a6 17       	cp	r26, r22
 81c:	b7 07       	cpc	r27, r23
 81e:	10 f0       	brcs	.+4      	; 0x824 <__udivmodhi4_ep>
 820:	a6 1b       	sub	r26, r22
 822:	b7 0b       	sbc	r27, r23

00000824 <__udivmodhi4_ep>:
 824:	88 1f       	adc	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	5a 95       	dec	r21
 82a:	a9 f7       	brne	.-22     	; 0x816 <__udivmodhi4_loop>
 82c:	80 95       	com	r24
 82e:	90 95       	com	r25
 830:	bc 01       	movw	r22, r24
 832:	cd 01       	movw	r24, r26
 834:	08 95       	ret

00000836 <_exit>:
 836:	f8 94       	cli

00000838 <__stop_program>:
 838:	ff cf       	rjmp	.-2      	; 0x838 <__stop_program>
