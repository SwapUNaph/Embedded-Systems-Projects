
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000332  000003c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000332  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800118  00800118  000003de  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000083  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000035a  00000000  00000000  00000481  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014d  00000000  00000000  000007db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c4  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000182  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ba  00000000  00000000  00000dfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_18>
  4c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__c.1589>:
  68:	53 74 72 69 6e 67 20 73 74 6f 72 65 64 20 69 6e     String stored in
  78:	20 46 4c 41 53 48 0a 00                              FLASH..

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	e2 e3       	ldi	r30, 0x32	; 50
  94:	f3 e0       	ldi	r31, 0x03	; 3
  96:	02 c0       	rjmp	.+4      	; 0x9c <.do_copy_data_start>

00000098 <.do_copy_data_loop>:
  98:	05 90       	lpm	r0, Z+
  9a:	0d 92       	st	X+, r0

0000009c <.do_copy_data_start>:
  9c:	a8 31       	cpi	r26, 0x18	; 24
  9e:	b1 07       	cpc	r27, r17
  a0:	d9 f7       	brne	.-10     	; 0x98 <.do_copy_data_loop>

000000a2 <__do_clear_bss>:
  a2:	11 e0       	ldi	r17, 0x01	; 1
  a4:	a8 e1       	ldi	r26, 0x18	; 24
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
  aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
  ac:	ad 35       	cpi	r26, 0x5D	; 93
  ae:	b1 07       	cpc	r27, r17
  b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
  b2:	0e 94 23 01 	call	0x246	; 0x246 <main>
  b6:	0c 94 97 01 	jmp	0x32e	; 0x32e <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
  d2:	90 91 c0 00 	lds	r25, 0x00C0
    data = UART0_DATA;
  d6:	20 91 c6 00 	lds	r18, 0x00C6
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  da:	e0 91 5a 01 	lds	r30, 0x015A
  de:	ef 5f       	subi	r30, 0xFF	; 255
  e0:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
  e2:	80 91 5b 01 	lds	r24, 0x015B
  e6:	e8 17       	cp	r30, r24
  e8:	11 f4       	brne	.+4      	; 0xee <__vector_18+0x30>
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	07 c0       	rjmp	.+14     	; 0xfc <__vector_18+0x3e>
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
  ee:	9c 71       	andi	r25, 0x1C	; 28
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  f0:	e0 93 5a 01 	sts	0x015A, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	e8 5c       	subi	r30, 0xC8	; 200
  f8:	fe 4f       	sbci	r31, 0xFE	; 254
  fa:	20 83       	st	Z, r18
    }
    UART_LastRxError |= lastRxError;   
  fc:	80 91 5c 01 	lds	r24, 0x015C
 100:	98 2b       	or	r25, r24
 102:	90 93 5c 01 	sts	0x015C, r25
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 12c:	90 91 58 01 	lds	r25, 0x0158
 130:	80 91 59 01 	lds	r24, 0x0159
 134:	98 17       	cp	r25, r24
 136:	69 f0       	breq	.+26     	; 0x152 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 138:	e0 91 59 01 	lds	r30, 0x0159
 13c:	ef 5f       	subi	r30, 0xFF	; 255
 13e:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 140:	e0 93 59 01 	sts	0x0159, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	e8 5e       	subi	r30, 0xE8	; 232
 148:	fe 4f       	sbci	r31, 0xFE	; 254
 14a:	80 81       	ld	r24, Z
 14c:	80 93 c6 00 	sts	0x00C6, r24
 150:	05 c0       	rjmp	.+10     	; 0x15c <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 152:	80 91 c1 00 	lds	r24, 0x00C1
 156:	8f 7d       	andi	r24, 0xDF	; 223
 158:	80 93 c1 00 	sts	0x00C1, r24
    }
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 16e:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
 170:	10 92 58 01 	sts	0x0158, r1
    UART_TxTail = 0;
 174:	10 92 59 01 	sts	0x0159, r1
    UART_RxHead = 0;
 178:	10 92 5a 01 	sts	0x015A, r1
    UART_RxTail = 0;
 17c:	10 92 5b 01 	sts	0x015B, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 180:	97 ff       	sbrs	r25, 7
 182:	03 c0       	rjmp	.+6      	; 0x18a <uart_init+0x1c>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	80 93 c0 00 	sts	0x00C0, r24
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 18a:	83 2f       	mov	r24, r19
 18c:	80 78       	andi	r24, 0x80	; 128
 18e:	80 93 c5 00 	sts	0x00C5, r24
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 192:	20 93 c4 00 	sts	0x00C4, r18
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 196:	88 e9       	ldi	r24, 0x98	; 152
 198:	80 93 c1 00 	sts	0x00C1, r24
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	80 93 c2 00 	sts	0x00C2, r24
    #endif 
    #endif

}/* uart_init */
 1a2:	08 95       	ret

000001a4 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
 1a4:	90 91 5a 01 	lds	r25, 0x015A
 1a8:	80 91 5b 01 	lds	r24, 0x015B
 1ac:	98 17       	cp	r25, r24
 1ae:	19 f4       	brne	.+6      	; 0x1b6 <uart_getc+0x12>
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	31 e0       	ldi	r19, 0x01	; 1
 1b4:	15 c0       	rjmp	.+42     	; 0x1e0 <uart_getc+0x3c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 1b6:	80 91 5b 01 	lds	r24, 0x015B
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	8f 71       	andi	r24, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e8 5c       	subi	r30, 0xC8	; 200
 1c4:	fe 4f       	sbci	r31, 0xFE	; 254
 1c6:	30 81       	ld	r19, Z
    lastRxError = UART_LastRxError;
 1c8:	20 91 5c 01 	lds	r18, 0x015C
    
    /* store buffer index */
    UART_RxTail = tmptail; 
 1cc:	80 93 5b 01 	sts	0x015B, r24
    
    UART_LastRxError = 0;
 1d0:	10 92 5c 01 	sts	0x015C, r1
    return (lastRxError << 8) + data;
 1d4:	92 2f       	mov	r25, r18
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	ac 01       	movw	r20, r24
 1da:	43 0f       	add	r20, r19
 1dc:	51 1d       	adc	r21, r1
 1de:	9a 01       	movw	r18, r20

}/* uart_getc */
 1e0:	c9 01       	movw	r24, r18
 1e2:	08 95       	ret

000001e4 <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
 1e4:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 1e6:	90 91 58 01 	lds	r25, 0x0158
 1ea:	9f 5f       	subi	r25, 0xFF	; 255
 1ec:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 1ee:	80 91 59 01 	lds	r24, 0x0159
 1f2:	98 17       	cp	r25, r24
 1f4:	e1 f3       	breq	.-8      	; 0x1ee <uart_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 1f6:	e9 2f       	mov	r30, r25
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	e8 5e       	subi	r30, 0xE8	; 232
 1fc:	fe 4f       	sbci	r31, 0xFE	; 254
 1fe:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 200:	90 93 58 01 	sts	0x0158, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 204:	80 91 c1 00 	lds	r24, 0x00C1
 208:	80 62       	ori	r24, 0x20	; 32
 20a:	80 93 c1 00 	sts	0x00C1, r24

}/* uart_putc */
 20e:	08 95       	ret

00000210 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	ec 01       	movw	r28, r24
 216:	03 c0       	rjmp	.+6      	; 0x21e <uart_puts+0xe>
    while (*s) 
      uart_putc(*s++);
 218:	21 96       	adiw	r28, 0x01	; 1
 21a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 21e:	88 81       	ld	r24, Y
 220:	88 23       	and	r24, r24
 222:	d1 f7       	brne	.-12     	; 0x218 <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	ec 01       	movw	r28, r24
 230:	02 c0       	rjmp	.+4      	; 0x236 <uart_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
 232:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <uart_putc>
 236:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 238:	21 96       	adiw	r28, 0x01	; 1
 23a:	84 91       	lpm	r24, Z+
 23c:	88 23       	and	r24, r24
 23e:	c9 f7       	brne	.-14     	; 0x232 <uart_puts_p+0x8>
      uart_putc(c);

}/* uart_puts_p */
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <main>:
/* Define UART buad rate here */
#define UART_BAUD_RATE      9600      


int main(void)
{
 246:	1f 93       	push	r17
 248:	df 93       	push	r29
 24a:	cf 93       	push	r28
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	27 97       	sbiw	r28, 0x07	; 7
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 b7 00 	call	0x16e	; 0x16e <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
 264:	78 94       	sei
     *  The string is buffered by the uart library in a circular buffer
     *  and one character at a time is transmitted to the UART using interrupts.
     *  uart_puts() blocks if it can not write the whole string to the circular 
     *  buffer
     */
    uart_puts("String stored in SRAM\n");
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 08 01 	call	0x210	; 0x210 <uart_puts>
    
    /*
     * Transmit string from program memory to UART
     */
    uart_puts_P("String stored in FLASH\n");
 26e:	88 e6       	ldi	r24, 0x68	; 104
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 15 01 	call	0x22a	; 0x22a <uart_puts_p>
        
    /* 
     * Use standard avr-libc functions to convert numbers into string
     * before transmitting via UART
     */     
    itoa( num, buffer, 10);   // convert interger into string (decimal format)         
 276:	86 e8       	ldi	r24, 0x86	; 134
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	be 01       	movw	r22, r28
 27c:	6f 5f       	subi	r22, 0xFF	; 255
 27e:	7f 4f       	sbci	r23, 0xFF	; 255
 280:	4a e0       	ldi	r20, 0x0A	; 10
 282:	50 e0       	ldi	r21, 0x00	; 0
 284:	0e 94 52 01 	call	0x2a4	; 0x2a4 <itoa>

    
    /*
     * Transmit single character to UART
     */
    uart_putc('\r');
 288:	8d e0       	ldi	r24, 0x0D	; 13
 28a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <uart_putc>
         * uart_getc() returns in the lower byte the received character and 
         * in the higher byte (bitmask) the last receive error
         * UART_NO_DATA is returned when no data is available.
         *
         */
        c = uart_getc();
 28e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <uart_getc>
 292:	18 2f       	mov	r17, r24
 294:	79 2f       	mov	r23, r25
                 
                uart_puts_P("Buffer overflow error\n");*/
            }
             
             // send received character back
             itoa(c,c,10);
 296:	61 2f       	mov	r22, r17
 298:	4a e0       	ldi	r20, 0x0A	; 10
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <itoa>
            uart_putc((unsigned char)c);
 2a0:	81 2f       	mov	r24, r17
 2a2:	f3 cf       	rjmp	.-26     	; 0x28a <main+0x44>

000002a4 <itoa>:
 2a4:	fb 01       	movw	r30, r22
 2a6:	9f 01       	movw	r18, r30
 2a8:	e8 94       	clt
 2aa:	42 30       	cpi	r20, 0x02	; 2
 2ac:	c4 f0       	brlt	.+48     	; 0x2de <itoa+0x3a>
 2ae:	45 32       	cpi	r20, 0x25	; 37
 2b0:	b4 f4       	brge	.+44     	; 0x2de <itoa+0x3a>
 2b2:	4a 30       	cpi	r20, 0x0A	; 10
 2b4:	29 f4       	brne	.+10     	; 0x2c0 <itoa+0x1c>
 2b6:	97 fb       	bst	r25, 7
 2b8:	1e f4       	brtc	.+6      	; 0x2c0 <itoa+0x1c>
 2ba:	90 95       	com	r25
 2bc:	81 95       	neg	r24
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	64 2f       	mov	r22, r20
 2c2:	77 27       	eor	r23, r23
 2c4:	0e 94 83 01 	call	0x306	; 0x306 <__udivmodhi4>
 2c8:	80 5d       	subi	r24, 0xD0	; 208
 2ca:	8a 33       	cpi	r24, 0x3A	; 58
 2cc:	0c f0       	brlt	.+2      	; 0x2d0 <itoa+0x2c>
 2ce:	89 5d       	subi	r24, 0xD9	; 217
 2d0:	81 93       	st	Z+, r24
 2d2:	cb 01       	movw	r24, r22
 2d4:	00 97       	sbiw	r24, 0x00	; 0
 2d6:	a1 f7       	brne	.-24     	; 0x2c0 <itoa+0x1c>
 2d8:	16 f4       	brtc	.+4      	; 0x2de <itoa+0x3a>
 2da:	5d e2       	ldi	r21, 0x2D	; 45
 2dc:	51 93       	st	Z+, r21
 2de:	10 82       	st	Z, r1
 2e0:	c9 01       	movw	r24, r18
 2e2:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <strrev>

000002e6 <strrev>:
 2e6:	dc 01       	movw	r26, r24
 2e8:	fc 01       	movw	r30, r24
 2ea:	67 2f       	mov	r22, r23
 2ec:	71 91       	ld	r23, Z+
 2ee:	77 23       	and	r23, r23
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <strrev+0x4>
 2f2:	32 97       	sbiw	r30, 0x02	; 2
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <strrev+0x18>
 2f6:	7c 91       	ld	r23, X
 2f8:	6d 93       	st	X+, r22
 2fa:	70 83       	st	Z, r23
 2fc:	62 91       	ld	r22, -Z
 2fe:	ae 17       	cp	r26, r30
 300:	bf 07       	cpc	r27, r31
 302:	c8 f3       	brcs	.-14     	; 0x2f6 <strrev+0x10>
 304:	08 95       	ret

00000306 <__udivmodhi4>:
 306:	aa 1b       	sub	r26, r26
 308:	bb 1b       	sub	r27, r27
 30a:	51 e1       	ldi	r21, 0x11	; 17
 30c:	07 c0       	rjmp	.+14     	; 0x31c <__udivmodhi4_ep>

0000030e <__udivmodhi4_loop>:
 30e:	aa 1f       	adc	r26, r26
 310:	bb 1f       	adc	r27, r27
 312:	a6 17       	cp	r26, r22
 314:	b7 07       	cpc	r27, r23
 316:	10 f0       	brcs	.+4      	; 0x31c <__udivmodhi4_ep>
 318:	a6 1b       	sub	r26, r22
 31a:	b7 0b       	sbc	r27, r23

0000031c <__udivmodhi4_ep>:
 31c:	88 1f       	adc	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	5a 95       	dec	r21
 322:	a9 f7       	brne	.-22     	; 0x30e <__udivmodhi4_loop>
 324:	80 95       	com	r24
 326:	90 95       	com	r25
 328:	bc 01       	movw	r22, r24
 32a:	cd 01       	movw	r24, r26
 32c:	08 95       	ret

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
